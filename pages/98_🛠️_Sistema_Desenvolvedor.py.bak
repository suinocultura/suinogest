import streamlit as st
import os
import sys
import pandas as pd
import importlib
import datetime
import base64
import json
import subprocess
from github import Github
from github.InputGitTreeElement import InputGitTreeElement
import tempfile
import re
import shutil

# Adicionar diret√≥rio raiz ao path para importar utils
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils import check_developer_access, check_permission, load_employees, save_employees, load_permissions_map, save_permissions_map

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema do Desenvolvedor",
    page_icon="üõ†Ô∏è",
    layout="wide"
)

# Initialize session state for authentication
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False
if 'current_user' not in st.session_state:
    st.session_state.current_user = None

# Verificar se o usu√°rio est√° autenticado
if 'authenticated' not in st.session_state or not st.session_state.authenticated:
    st.error("Voc√™ precisa estar autenticado para acessar esta p√°gina.")
    st.stop()

# Verificar se o usu√°rio tem permiss√£o para acessar esta p√°gina
if not check_permission(st.session_state.current_user, 'developer_tools'):
    st.error("Voc√™ n√£o tem permiss√£o para acessar esta p√°gina.")
    st.stop()


# Verificar se o usu√°rio est√° autenticado e tem permiss√£o de desenvolvedor
if "authenticated" not in st.session_state or not st.session_state.authenticated:
    st.error("Voc√™ precisa estar autenticado para acessar esta p√°gina.")
    st.stop()

if "current_user" not in st.session_state or not check_permission(st.session_state.current_user, 'developer_tools'):
    st.error("Voc√™ n√£o tem permiss√£o para acessar esta p√°gina. Apenas desenvolvedores t√™m acesso.")
    st.stop()

# Estilo CSS personalizado
st.markdown("""
<style>
    .dev-header {
        background-color: #1E1E1E;
        color: #00FF00;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 1rem;
        border-left: 5px solid #00FF00;
        font-family: 'Courier New', monospace;
    }
    .dev-section {
        background-color: #f0f0f0;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 1.5rem;
        border-left: 5px solid #2196F3;
    }
    .dev-btn {
        background-color: #2196F3;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        text-decoration: none;
        display: inline-block;
        margin: 0.5rem 0;
    }
    .danger-btn {
        background-color: #FF5252;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        text-decoration: none;
        display: inline-block;
        margin: 0.5rem 0;
    }
    .log-output {
        background-color: #1E1E1E;
        color: #CCCCCC;
        font-family: 'Courier New', monospace;
        padding: 1rem;
        border-radius: 5px;
        height: 300px;
        overflow-y: auto;
        white-space: pre-wrap;
    }
    .status-ok {
        color: #4CAF50;
        font-weight: bold;
    }
    .status-warning {
        color: #FFC107;
        font-weight: bold;
    }
    .status-error {
        color: #FF5252;
        font-weight: bold;
    }
    .dev-metric {
        background-color: #2D2D2D;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
    }
    .dev-metric-value {
        font-size: 2rem;
        font-weight: bold;
        color: #00FF00;
    }
    .dev-metric-label {
        color: #CCCCCC;
        font-size: 0.9rem;
    }
</style>
""", unsafe_allow_html=True)

st.markdown('<div class="dev-header"><h1>üõ†Ô∏è Sistema do Desenvolvedor</h1><p>Ferramentas avan√ßadas para gerenciamento e desenvolvimento do sistema</p></div>', unsafe_allow_html=True)

# Tabs para as diferentes funcionalidades
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs(["üìä Dashboard", "üë• Gerenciamento de Usu√°rios", "üîÑ Manuten√ß√£o", "‚öôÔ∏è Configura√ß√µes", "üì• Downloads", "üîÑ Atualiza√ß√µes"])

with tab1:
    st.markdown('<div class="dev-section"><h2>Dashboard de Desenvolvimento</h2></div>', unsafe_allow_html=True)
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    # Fun√ß√£o para contar arquivos em um diret√≥rio
    def count_files(directory, extension=None):
        count = 0
        for _, _, files in os.walk(directory):
            if extension:
                count += len([f for f in files if f.endswith(extension)])
            else:
                count += len(files)
        return count
    
    # Fun√ß√£o para pegar o tamanho de um diret√≥rio
    def get_dir_size(directory):
        total_size = 0
        for dirpath, _, filenames in os.walk(directory):
            for f in filenames:
                fp = os.path.join(dirpath, f)
                if not os.path.islink(fp):
                    total_size += os.path.getsize(fp)
        return total_size / (1024 * 1024)  # Tamanho em MB
    
    # M√©tricas
    with col1:
        st.markdown('<div class="dev-metric">', unsafe_allow_html=True)
        py_files = count_files(".", ".py")
        st.markdown(f'<div class="dev-metric-value">{py_files}</div>', unsafe_allow_html=True)
        st.markdown('<div class="dev-metric-label">Arquivos Python</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
    with col2:
        st.markdown('<div class="dev-metric">', unsafe_allow_html=True)
        pages_count = count_files("pages", ".py")
        st.markdown(f'<div class="dev-metric-value">{pages_count}</div>', unsafe_allow_html=True)
        st.markdown('<div class="dev-metric-label">P√°ginas da Aplica√ß√£o</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
    with col3:
        st.markdown('<div class="dev-metric">', unsafe_allow_html=True)
        if os.path.exists("data"):
            data_size = round(get_dir_size("data"), 2)
        else:
            data_size = 0
        st.markdown(f'<div class="dev-metric-value">{data_size} MB</div>', unsafe_allow_html=True)
        st.markdown('<div class="dev-metric-label">Tamanho dos Dados</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
    with col4:
        st.markdown('<div class="dev-metric">', unsafe_allow_html=True)
        # Contar usu√°rios ativos
        employees_df = load_employees()
        active_users = len(employees_df[employees_df['status'] == 'Ativo']) if not employees_df.empty else 0
        st.markdown(f'<div class="dev-metric-value">{active_users}</div>', unsafe_allow_html=True)
        st.markdown('<div class="dev-metric-label">Usu√°rios Ativos</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Verifica√ß√£o do sistema
    st.markdown("### Verifica√ß√£o de Componentes do Sistema")
    
    # Status dos componentes vitais
    components = [
        {"name": "Python", "status": "OK", "version": sys.version.split()[0]},
        {"name": "Streamlit", "status": "OK", "version": st.__version__},
        {"name": "Pandas", "status": "OK", "version": pd.__version__},
        {"name": "Diret√≥rio de Dados", "status": "OK" if os.path.exists("data") else "ERROR", "version": "-"},
    ]
    
    # Verificar arquivos cr√≠ticos
    critical_files = ["app.py", "utils.py", "create_download_package.py"]
    for file in critical_files:
        status = "OK" if os.path.exists(file) else "MISSING"
        components.append({"name": f"Arquivo {file}", "status": status, "version": "-"})
    
    # Exibir status dos componentes
    st.write("Status dos componentes do sistema:")
    
    component_df = pd.DataFrame(components)
    
    # Aplicar cor com base no status
    def highlight_status(s):
        if s == 'OK':
            return 'background-color: #EAFFEA; color: #4CAF50; font-weight: bold'
        elif s == 'WARNING':
            return 'background-color: #FFFAEA; color: #FFC107; font-weight: bold'
        elif s == 'ERROR' or s == 'MISSING':
            return 'background-color: #FFEAEA; color: #FF5252; font-weight: bold'
        else:
            return ''
    
    st.dataframe(
        component_df.style.applymap(highlight_status, subset=['status']),
        hide_index=True,
        use_container_width=True
    )

with tab2:
    st.markdown('<div class="dev-section"><h2>Gerenciamento de Usu√°rios</h2></div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("Registrar Novo Desenvolvedor")
        
        # Formul√°rio para cadastro de desenvolvedores
        with st.form(key="dev_registration_form"):
            nome = st.text_input("Nome Completo")
            matricula = st.text_input("Matr√≠cula")
            setor = st.text_input("Setor", value="Desenvolvimento")
            observacao = st.text_area("Observa√ß√£o", placeholder="Adicione informa√ß√µes adicionais se necess√°rio")
            
            submit_button = st.form_submit_button(label="Registrar Desenvolvedor")
            
            if submit_button:
                if nome and matricula:
                    # Importar a fun√ß√£o register_employee
                    from utils import register_employee
                    
                    # Chamar a fun√ß√£o para registrar um novo desenvolvedor
                    success, message = register_employee(
                        nome=nome,
                        matricula=matricula,
                        cargo="Desenvolvedor",  # Cargo fixo como Desenvolvedor
                        setor=setor,
                        observacao=observacao
                    )
                    
                    if success:
                        st.success(message)
                    else:
                        st.error(message)
                else:
                    st.error("Por favor, preencha todos os campos obrigat√≥rios.")
    
    with col2:
        st.subheader("Desenvolvedores Cadastrados")
        
        # Carregar dados dos funcion√°rios
        employees_df = load_employees()
        
        # Filtrar apenas os desenvolvedores
        if not employees_df.empty:
            dev_df = employees_df[employees_df['cargo'] == 'Desenvolvedor']
            
            if not dev_df.empty:
                # Selecionar apenas as colunas relevantes
                display_df = dev_df[['nome', 'matricula', 'status', 'ultimo_acesso']]
                
                # Formatar o DataFrame para exibi√ß√£o
                st.dataframe(
                    display_df,
                    hide_index=True,
                    use_container_width=True
                )
                
                # Op√ß√£o para alterar status
                st.subheader("Alterar Status")
                
                selected_dev = st.selectbox(
                    "Selecione o Desenvolvedor",
                    options=dev_df['matricula'].tolist(),
                    format_func=lambda x: f"{dev_df[dev_df['matricula'] == x]['nome'].iloc[0]} ({x})"
                )
                
                new_status = st.selectbox(
                    "Novo Status",
                    options=["Ativo", "Inativo"]
                )
                
                if st.button("Atualizar Status"):
                    from utils import update_employee_status
                    success, message = update_employee_status(selected_dev, new_status)
                    
                    if success:
                        st.success(message)
                        st.rerun()
                    else:
                        st.error(message)
            else:
                st.info("N√£o h√° desenvolvedores cadastrados no sistema.")
        else:
            st.info("N√£o h√° funcion√°rios cadastrados no sistema.")

with tab3:
    st.markdown('<div class="dev-section"><h2>Manuten√ß√£o do Sistema</h2></div>', unsafe_allow_html=True)
    
    # Dividir em se√ß√µes
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("Backup e Restaura√ß√£o")
        
        # Se√ß√£o de backup
        with st.expander("Criar Backup", expanded=True):
            st.write("Crie um backup completo dos dados do sistema:")
            
            if st.button("Iniciar Backup", key="btn_backup"):
                # Criar diret√≥rio de backup se n√£o existir
                backup_dir = "backups"
                if not os.path.exists(backup_dir):
                    os.makedirs(backup_dir)
                
                # Nome do arquivo de backup com data e hora atual
                timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_file = f"{backup_dir}/backup_{timestamp}.zip"
                
                # Criar backup
                import zipfile
                
                try:
                    with zipfile.ZipFile(backup_file, 'w', zipfile.ZIP_DEFLATED) as zipf:
                        # Adicionar diret√≥rio de dados
                        if os.path.exists("data"):
                            for root, _, files in os.walk("data"):
                                for file in files:
                                    file_path = os.path.join(root, file)
                                    zipf.write(file_path, os.path.relpath(file_path, ""))
                    
                    # Sucesso!
                    st.success(f"Backup criado com sucesso em {backup_file}")
                    
                    # Op√ß√£o para download
                    with open(backup_file, "rb") as f:
                        data = f.read()
                    
                    b64 = base64.b64encode(data).decode()
                    href = f'<a href="data:application/zip;base64,{b64}" download="{os.path.basename(backup_file)}" style="text-decoration:none;">'\
                          f'<div style="background-color:#4CAF50; color:white; padding:10px; border-radius:5px; '\
                          f'cursor:pointer; text-align:center; margin:10px 0px;">Baixar Arquivo de Backup</div></a>'
                    
                    st.markdown(href, unsafe_allow_html=True)
                    
                except Exception as e:
                    st.error(f"Erro ao criar backup: {str(e)}")
        
        # Se√ß√£o de restaura√ß√£o
        with st.expander("Restaurar Backup"):
            st.write("Restaure um backup de dados do sistema:")
            
            uploaded_file = st.file_uploader("Selecione o arquivo de backup (.zip)", type="zip")
            
            if uploaded_file is not None:
                if st.button("Restaurar Dados", key="btn_restore"):
                    # Criar diret√≥rio tempor√°rio
                    import tempfile
                    import shutil
                    
                    with tempfile.TemporaryDirectory() as temp_dir:
                        # Salvar o arquivo de backup no diret√≥rio tempor√°rio
                        temp_file = os.path.join(temp_dir, "backup.zip")
                        with open(temp_file, "wb") as f:
                            f.write(uploaded_file.read())
                        
                        # Extrair conte√∫do
                        try:
                            with zipfile.ZipFile(temp_file, 'r') as zipf:
                                # Extrair apenas os arquivos da pasta data
                                data_files = [f for f in zipf.namelist() if f.startswith("data/")]
                                
                                # Verificar se h√° arquivos de dados
                                if not data_files:
                                    st.error("Arquivo de backup inv√°lido. N√£o cont√©m dados.")
                                    st.stop()
                                
                                # Pergunta de confirma√ß√£o
                                restore_confirm = st.radio(
                                    "Esta opera√ß√£o substituir√° os dados existentes. Deseja continuar?",
                                    ["N√£o", "Sim"]
                                )
                                
                                if restore_confirm == "Sim":
                                    # Extrair os arquivos
                                    for file in data_files:
                                        zipf.extract(file, "")
                                    
                                    st.success("Dados restaurados com sucesso!")
                                    st.warning("Recarregue a p√°gina para ver os dados restaurados.")
                                else:
                                    st.info("Opera√ß√£o cancelada. Os dados atuais n√£o foram alterados.")
                        
                        except Exception as e:
                            st.error(f"Erro ao restaurar backup: {str(e)}")
                
    with col2:
        st.subheader("Verifica√ß√£o e Reparo")
        
        # Se√ß√£o de verifica√ß√£o do banco de dados
        with st.expander("Verificar Integridade dos Dados", expanded=True):
            st.write("Verifique se os arquivos de dados est√£o √≠ntegros e com a estrutura correta.")
            
            if st.button("Iniciar Verifica√ß√£o", key="btn_check"):
                # Listar arquivos esperados
                expected_files = [
                    "data/animals.csv",
                    "data/breeding_cycles.csv",
                    "data/employees.csv",
                    "data/gestation.csv",
                    "data/weight_records.csv"
                ]
                
                results = []
                
                for file_path in expected_files:
                    if os.path.exists(file_path):
                        try:
                            # Tentar ler o arquivo para verificar a integridade
                            df = pd.read_csv(file_path)
                            row_count = len(df)
                            status = "OK"
                        except Exception as e:
                            row_count = 0
                            status = "ERRO"
                        
                        results.append({
                            "arquivo": os.path.basename(file_path),
                            "status": status,
                            "registros": row_count,
                            "tamanho": f"{os.path.getsize(file_path) / 1024:.2f} KB" if os.path.exists(file_path) else "0 KB"
                        })
                    else:
                        results.append({
                            "arquivo": os.path.basename(file_path),
                            "status": "FALTANDO",
                            "registros": 0,
                            "tamanho": "0 KB"
                        })
                
                results_df = pd.DataFrame(results)
                
                # Fun√ß√£o para destacar status
                def highlight_status(val):
                    if val == "OK":
                        return 'background-color: #EAFFEA; color: green;'
                    elif val == "ERRO":
                        return 'background-color: #FFEAEA; color: red;'
                    else:
                        return 'background-color: #FFF3E0; color: orange;'
                
                # Exibir resultados
                st.dataframe(
                    results_df.style.applymap(highlight_status, subset=['status']),
                    hide_index=True,
                    use_container_width=True
                )
                
                # Contar problemas
                problems = len(results_df[results_df['status'] != "OK"])
                
                if problems == 0:
                    st.success("Todos os arquivos de dados est√£o √≠ntegros e dispon√≠veis.")
                else:
                    st.warning(f"Foram encontrados problemas em {problems} arquivo(s).")
        
        # Se√ß√£o de logs
        with st.expander("Logs do Sistema"):
            st.write("Visualize os logs mais recentes do sistema:")
            
            # Criar fun√ß√£o para ler os logs
            def get_logs(n_lines=100):
                try:
                    # Verificar se h√° um arquivo de log
                    log_file = "app.log"
                    
                    if os.path.exists(log_file):
                        with open(log_file, "r") as f:
                            # Ler as √∫ltimas n linhas
                            lines = f.readlines()[-n_lines:]
                            return "".join(lines)
                    else:
                        return "Arquivo de log n√£o encontrado."
                except Exception as e:
                    return f"Erro ao ler logs: {str(e)}"
            
            # Op√ß√µes para visualiza√ß√£o de logs
            n_lines = st.slider("N√∫mero de linhas para mostrar", 10, 500, 100)
            
            # Exibir logs
            log_content = get_logs(n_lines)
            st.markdown(f'<div class="log-output">{log_content}</div>', unsafe_allow_html=True)
            
            # Op√ß√£o para limpar logs
            if st.button("Limpar Arquivo de Log", key="btn_clear_log"):
                try:
                    log_file = "app.log"
                    if os.path.exists(log_file):
                        # Fazer backup do arquivo de log antes de limpar
                        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                        backup_log = f"app_{timestamp}.log.bak"
                        
                        # Copiar para backup
                        import shutil
                        shutil.copy2(log_file, backup_log)
                        
                        # Limpar o arquivo
                        with open(log_file, "w") as f:
                            f.write(f"--- Log reiniciado em {datetime.datetime.now()} ---\n")
                        
                        st.success(f"Arquivo de log limpo. Backup criado em {backup_log}")
                    else:
                        st.warning("Arquivo de log n√£o encontrado.")
                except Exception as e:
                    st.error(f"Erro ao limpar logs: {str(e)}")

with tab4:
    st.markdown('<div class="dev-section"><h2>Configura√ß√µes do Sistema</h2></div>', unsafe_allow_html=True)
    
    # Configura√ß√µes do sistema
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("Configura√ß√µes Avan√ßadas")
        
        # Se√ß√£o para configura√ß√µes gerais
        with st.expander("Configura√ß√µes Gerais", expanded=True):
            # Carregar configura√ß√£o existente ou criar uma padr√£o
            config_file = "config.json"
            
            if os.path.exists(config_file):
                try:
                    with open(config_file, "r") as f:
                        config = json.load(f)
                except:
                    config = {"debug_mode": False, "max_upload_size_mb": 10, "session_timeout_minutes": 60}
            else:
                config = {"debug_mode": False, "max_upload_size_mb": 10, "session_timeout_minutes": 60}
            
            # Editar configura√ß√µes
            debug_mode = st.toggle("Modo de Depura√ß√£o", config.get("debug_mode", False))
            max_upload = st.number_input("Tamanho M√°ximo de Upload (MB)", min_value=1, max_value=100, value=config.get("max_upload_size_mb", 10))
            session_timeout = st.number_input("Tempo de Expira√ß√£o da Sess√£o (minutos)", min_value=5, max_value=240, value=config.get("session_timeout_minutes", 60))
            
            # Atualizar configura√ß√£o
            new_config = {
                "debug_mode": debug_mode,
                "max_upload_size_mb": max_upload,
                "session_timeout_minutes": session_timeout
            }
            
            # Salvar configura√ß√µes
            if st.button("Salvar Configura√ß√µes"):
                try:
                    with open(config_file, "w") as f:
                        json.dump(new_config, f, indent=4)
                    st.success("Configura√ß√µes salvas com sucesso!")
                except Exception as e:
                    st.error(f"Erro ao salvar configura√ß√µes: {str(e)}")
        
        # Se√ß√£o para configura√ß√µes de comportamento do sistema
        with st.expander("Comportamento do Sistema"):
            st.write("Configure o comportamento espec√≠fico do sistema de gest√£o:")
            
            # Carregar configura√ß√£o avan√ßada ou criar uma padr√£o
            advanced_config_file = "advanced_config.json"
            
            if os.path.exists(advanced_config_file):
                try:
                    with open(advanced_config_file, "r") as f:
                        adv_config = json.load(f)
                except:
                    adv_config = {"enable_export": True, "max_reports": 50, "show_advanced_features": False}
            else:
                adv_config = {"enable_export": True, "max_reports": 50, "show_advanced_features": False}
            
            # Editar configura√ß√µes
            enable_export = st.checkbox("Habilitar Exporta√ß√£o de Dados", adv_config.get("enable_export", True))
            max_reports = st.number_input("N√∫mero M√°ximo de Relat√≥rios", min_value=10, max_value=500, value=adv_config.get("max_reports", 50))
            show_adv_features = st.checkbox("Mostrar Recursos Avan√ßados", adv_config.get("show_advanced_features", False))
            
            # Atualizar configura√ß√£o
            new_adv_config = {
                "enable_export": enable_export,
                "max_reports": max_reports,
                "show_advanced_features": show_adv_features
            }
            
            # Salvar configura√ß√µes avan√ßadas
            if st.button("Salvar Configura√ß√µes Avan√ßadas"):
                try:
                    with open(advanced_config_file, "w") as f:
                        json.dump(new_adv_config, f, indent=4)
                    st.success("Configura√ß√µes avan√ßadas salvas com sucesso!")
                except Exception as e:
                    st.error(f"Erro ao salvar configura√ß√µes avan√ßadas: {str(e)}")
        
        # Nova se√ß√£o para configura√ß√£o de p√°ginas do menu
        with st.expander("Configura√ß√£o de P√°ginas do Menu", expanded=True):
            st.write("Configure quais p√°ginas aparecer√£o no menu lateral e como elas ser√£o exibidas:")
            
            # Verificar e criar diret√≥rio de configura√ß√£o de p√°ginas se n√£o existir
            page_config_dir = ".streamlit/page_config"
            if not os.path.exists(page_config_dir):
                os.makedirs(page_config_dir)
            
            # Arquivo de configura√ß√£o de visibilidade das p√°ginas
            pages_visibility_file = f"{page_config_dir}/visibility.json"
            page_permissions_file = f"{page_config_dir}/page_permissions.json"
            
            # Carregar configura√ß√£o de visibilidade existente ou criar uma padr√£o
            # Formato: {"page_file_name": true/false}
            if os.path.exists(pages_visibility_file):
                try:
                    with open(pages_visibility_file, "r") as f:
                        pages_visibility = json.load(f)
                except:
                    # Iniciar com todas as p√°ginas vis√≠veis
                    pages_visibility = {}
            else:
                # Iniciar com todas as p√°ginas vis√≠veis
                pages_visibility = {}
            
            # Carregar configura√ß√£o de permiss√µes de p√°ginas
            # Formato: {"page_file_name": ["permission1", "permission2"]}
            if os.path.exists(page_permissions_file):
                try:
                    with open(page_permissions_file, "r") as f:
                        page_permissions = json.load(f)
                except:
                    # Iniciar com permiss√µes vazias
                    page_permissions = {}
            else:
                # Iniciar com permiss√µes vazias
                page_permissions = {}
            
            # Carregar lista de arquivos de p√°ginas
            page_files = [f for f in os.listdir("pages") if f.endswith(".py")]
            page_files.sort()  # Ordenar alfabeticamente
            
            # Criar abas para as diferentes configura√ß√µes
            vis_tab, perm_tab = st.tabs(["Visibilidade", "Permiss√µes"])
            
            with vis_tab:
                st.write("#### Visibilidade das P√°ginas")
                st.write("Selecione quais p√°ginas ser√£o vis√≠veis no menu lateral:")
                
                # Lista para armazenar novas configura√ß√µes de visibilidade
                new_visibility = {}
                
                # Criar checkbox para cada p√°gina
                for page_file in page_files:
                    # Extrair nome limpo da p√°gina (remove n√∫meros e emojis do in√≠cio)
                    clean_name = ' '.join(page_file.split('_')[1:]).replace('.py', '')
                    
                    # Verificar o status atual ou definir como vis√≠vel por padr√£o
                    is_visible = pages_visibility.get(page_file, True)
                    
                    # Criar checkbox para a p√°gina
                    visible = st.checkbox(
                        f"{clean_name}",
                        value=is_visible,
                        key=f"vis_{page_file}"
                    )
                    
                    # Armazenar a configura√ß√£o
                    new_visibility[page_file] = visible
                
                # Bot√£o para salvar a configura√ß√£o de visibilidade
                if st.button("Salvar Configura√ß√£o de Visibilidade"):
                    try:
                        # Salvar a configura√ß√£o de visibilidade
                        with open(pages_visibility_file, "w") as f:
                            json.dump(new_visibility, f, indent=4)
                        
                        # Atualizar arquivo pages.toml para aplicar as configura√ß√µes
                        pages_toml_content = """# Configura√ß√£o das p√°ginas no menu lateral

# Estilo global das p√°ginas
[global]
showPagesInSidebar = true
hideSidebarNavigation = false

# Configura√ß√µes das se√ß√µes
[pages]
section_spacing = "15px"
heading_color = "#4B7BA8"
heading_font_size = "16px"
page_font_size = "14px"
indent_depth = "15px"

# Renomear o app principal de "app" para "Login"
[pages.app]
displayName = "üîë Login"
"""
                        
                        # Adicionar configura√ß√µes de visibilidade ao TOML
                        for page_file, is_visible in new_visibility.items():
                            if not is_visible:  # Se a p√°gina n√£o for vis√≠vel
                                page_id = page_file.replace(".py", "")
                                pages_toml_content += f"""
[pages.{page_id}]
hideInSidebar = true
"""
                        
                        # Salvar o arquivo pages.toml
                        with open(".streamlit/pages.toml", "w") as f:
                            f.write(pages_toml_content)
                        
                        st.success("Configura√ß√£o de visibilidade das p√°ginas salva com sucesso!")
                        st.info("Reinicie a aplica√ß√£o para aplicar as mudan√ßas ou use o bot√£o 'Recarregar' na se√ß√£o de Recarregamento do Sistema.")
                        
                    except Exception as e:
                        st.error(f"Erro ao salvar configura√ß√£o de visibilidade: {str(e)}")
            
            with perm_tab:
                st.write("#### Permiss√µes de Acesso √†s P√°ginas")
                st.write("Configure quais permiss√µes s√£o necess√°rias para acessar cada p√°gina:")
                
                # Lista de todas as permiss√µes dispon√≠veis no sistema
                all_permission_types = [
                    "admin", 
                    "manage_users", 
                    "developer_tools", 
                    "system_config",
                    "edit",
                    "view_reports",
                    "export_data",
                    "import_data",
                    "manage_animals",
                    "manage_reproduction",
                    "manage_health",
                    "manage_growth"
                ]
                
                # Selecionar p√°gina para configurar permiss√µes
                selected_page = st.selectbox(
                    "Selecione a p√°gina para configurar permiss√µes:",
                    options=page_files,
                    format_func=lambda x: x  # Mostrar nome completo do arquivo
                )
                
                # Obter permiss√µes atuais para a p√°gina selecionada (lista vazia como padr√£o)
                current_permissions = page_permissions.get(selected_page, [])
                
                st.write(f"**Configurando permiss√µes para:** {selected_page}")
                
                # Explica√ß√£o sobre como as permiss√µes funcionam
                st.info("""
                **Como as permiss√µes funcionam:**
                - Se nenhuma permiss√£o for selecionada, a p√°gina ser√° acess√≠vel por todos os usu√°rios autenticados
                - Se uma ou mais permiss√µes forem selecionadas, o usu√°rio precisar√° ter pelo menos uma delas para acessar a p√°gina
                - Usu√°rios sem as permiss√µes necess√°rias n√£o poder√£o visualizar ou acessar a p√°gina
                """)
                
                # Criar multi-select para selecionar permiss√µes
                selected_permissions = st.multiselect(
                    "Selecione as permiss√µes necess√°rias para acessar esta p√°gina:",
                    options=all_permission_types,
                    default=current_permissions,
                    help="O usu√°rio precisar√° ter pelo menos uma dessas permiss√µes para acessar a p√°gina"
                )
                
                # Mostrar quais cargos ter√£o acesso √† p√°gina com base nas permiss√µes selecionadas
                if selected_permissions:
                    st.write("**Cargos que ter√£o acesso:**")
                    
                    # Carregar mapeamento de permiss√µes de cargos
                    roles_permissions = load_permissions_map()
                    
                    # Verificar quais cargos t√™m pelo menos uma das permiss√µes selecionadas
                    roles_with_access = []
                    for role, permissions in roles_permissions.items():
                        has_access = any(perm in permissions for perm in selected_permissions)
                        if has_access:
                            roles_with_access.append(role)
                    
                    if roles_with_access:
                        for role in roles_with_access:
                            st.write(f"- {role}")
                    else:
                        st.warning("Nenhum cargo ter√° acesso a esta p√°gina com as permiss√µes selecionadas.")
                else:
                    st.write("**Todos os usu√°rios autenticados ter√£o acesso a esta p√°gina.**")
                
                # Bot√£o para salvar as permiss√µes da p√°gina
                if st.button("Salvar Permiss√µes da P√°gina"):
                    try:
                        # Atualizar as permiss√µes da p√°gina no dicion√°rio
                        page_permissions[selected_page] = selected_permissions
                        
                        # Salvar o arquivo de permiss√µes de p√°ginas
                        with open(page_permissions_file, "w") as f:
                            json.dump(page_permissions, f, indent=4)
                        
                        st.success(f"Permiss√µes da p√°gina {selected_page} salvas com sucesso!")
                        
                    except Exception as e:
                        st.error(f"Erro ao salvar permiss√µes da p√°gina: {str(e)}")
                
                # Op√ß√£o para aplicar permiss√µes a todas as p√°ginas
                st.write("---")
                st.write("### Configura√ß√£o em Lote")
                
                # Agrupar p√°ginas por categoria com base no prefixo num√©rico
                page_categories = {}
                for page in page_files:
                    prefix = page.split("_")[0].strip()
                    if prefix not in page_categories:
                        page_categories[prefix] = []
                    page_categories[prefix].append(page)
                
                # Selecionar categoria
                selected_category = st.selectbox(
                    "Selecione um grupo de p√°ginas:",
                    options=sorted(page_categories.keys()),
                    format_func=lambda x: f"Grupo {x} ({len(page_categories[x])} p√°ginas)"
                )
                
                # Mostrar p√°ginas na categoria
                if selected_category:
                    st.write("**P√°ginas neste grupo:**")
                    for page in page_categories[selected_category]:
                        st.write(f"- {page}")
                    
                    # Permiss√µes para aplicar a todas as p√°ginas na categoria
                    batch_permissions = st.multiselect(
                        "Selecione permiss√µes para aplicar a todas as p√°ginas deste grupo:",
                        options=all_permission_types,
                        help="Estas permiss√µes ser√£o aplicadas a todas as p√°ginas do grupo selecionado"
                    )
                    
                    # Bot√£o para aplicar permiss√µes em lote
                    if st.button("Aplicar Permiss√µes ao Grupo"):
                        try:
                            # Atualizar permiss√µes para todas as p√°ginas na categoria
                            for page in page_categories[selected_category]:
                                page_permissions[page] = batch_permissions
                            
                            # Salvar o arquivo de permiss√µes de p√°ginas
                            with open(page_permissions_file, "w") as f:
                                json.dump(page_permissions, f, indent=4)
                            
                            st.success(f"Permiss√µes aplicadas com sucesso a todas as p√°ginas do grupo {selected_category}!")
                            
                        except Exception as e:
                            st.error(f"Erro ao aplicar permiss√µes em lote: {str(e)}")
            
            
            st.write("---")
            
            # Se√ß√£o para reordenar p√°ginas
            st.write("#### Reordena√ß√£o de P√°ginas")
            st.write("Reordene as p√°ginas renomeando seus arquivos (os n√∫meros no in√≠cio determinam a ordem):")
            
            renaming_col1, renaming_col2 = st.columns(2)
            
            with renaming_col1:
                # Selecionar p√°gina para renomear
                selected_page = st.selectbox(
                    "Selecione a p√°gina para reordenar:",
                    options=page_files,
                    format_func=lambda x: x  # Mostrar nome completo do arquivo
                )
            
            with renaming_col2:
                # Selecionar nova posi√ß√£o
                current_prefix = selected_page.split("_")[0]
                new_prefix = st.text_input(
                    "Novo prefixo num√©rico:",
                    value=current_prefix,
                    help="Digite o novo n√∫mero de ordem (ex: 01, 05, 10)"
                )
            
            # Bot√£o para renomear
            if st.button("Reordenar P√°gina"):
                if new_prefix != current_prefix:
                    try:
                        # Construir novo nome de arquivo
                        new_filename = selected_page.replace(current_prefix, new_prefix, 1)
                        
                        # Verificar se o arquivo de destino j√° existe
                        if os.path.exists(f"pages/{new_filename}"):
                            st.error(f"N√£o foi poss√≠vel renomear: o arquivo {new_filename} j√° existe.")
                        else:
                            # Renomear o arquivo
                            os.rename(f"pages/{selected_page}", f"pages/{new_filename}")
                            st.success(f"P√°gina reordenada com sucesso: {selected_page} ‚Üí {new_filename}")
                            
                            # Sugerir recarregar a p√°gina
                            st.info("Recarregue esta p√°gina para ver as mudan√ßas.")
                    except Exception as e:
                        st.error(f"Erro ao reordenar p√°gina: {str(e)}")
                else:
                    st.info("Nenhuma altera√ß√£o realizada: o prefixo √© o mesmo.")
                    
            st.write("---")
            
            # Se√ß√£o para renomear p√°ginas (alterar o emoji ou nome)
            st.write("#### Renomea√ß√£o de P√°ginas")
            st.write("Altere o emoji ou o nome das p√°ginas:")
            
            # Selecionar p√°gina para modificar o nome
            selected_page_rename = st.selectbox(
                "Selecione a p√°gina para renomear:",
                options=page_files,
                format_func=lambda x: x,  # Mostrar nome completo do arquivo
                key="rename_select"
            )
            
            # Extrair partes do nome da p√°gina
            if selected_page_rename:
                parts = selected_page_rename.split("_")
                prefix = parts[0]  # Ex: "01"
                
                if len(parts) > 1:
                    # Se o segundo elemento come√ßa com um emoji, separamos ele
                    second_part = parts[1]
                    emoji = ""
                    name_parts = []
                    
                    # Verificar se h√° um emoji no in√≠cio (caracteres n√£o-ASCII)
                    for char in second_part:
                        if ord(char) > 127:  # Caractere n√£o-ASCII, provavelmente emoji
                            emoji += char
                        else:
                            name_parts = [second_part[len(emoji):]] + parts[2:]
                            break
                    
                    if not emoji:  # Se n√£o encontrou emoji
                        emoji = ""
                        name_parts = parts[1:]
                    
                    # Juntar as partes restantes do nome
                    current_name = "_".join(name_parts).replace(".py", "")
                else:
                    # Se n√£o h√° partes suficientes, definir valores padr√£o
                    emoji = ""
                    current_name = selected_page_rename.replace(".py", "").replace(prefix+"_", "")
                
                # Campos para editar o emoji e o nome
                new_emoji = st.text_input("Emoji:", value=emoji, 
                                         help="Digite um emoji para a p√°gina, ou deixe em branco")
                
                new_name = st.text_input("Nome da p√°gina:", value=current_name,
                                         help="Digite o novo nome da p√°gina (sem o prefixo num√©rico)")
                
                # Visualiza√ß√£o do novo nome de arquivo
                if new_name:
                    if new_emoji:
                        new_filename = f"{prefix}_{new_emoji}_{new_name}.py"
                    else:
                        new_filename = f"{prefix}_{new_name}.py"
                    
                    st.write(f"Novo nome de arquivo: **{new_filename}**")
                    
                    # Bot√£o para renomear
                    if st.button("Renomear P√°gina"):
                        try:
                            # Verificar se o arquivo de destino j√° existe
                            if os.path.exists(f"pages/{new_filename}") and new_filename != selected_page_rename:
                                st.error(f"N√£o foi poss√≠vel renomear: o arquivo {new_filename} j√° existe.")
                            else:
                                # Renomear o arquivo
                                os.rename(f"pages/{selected_page_rename}", f"pages/{new_filename}")
                                st.success(f"P√°gina renomeada com sucesso: {selected_page_rename} ‚Üí {new_filename}")
                                
                                # Sugerir recarregar a p√°gina
                                st.info("Recarregue esta p√°gina para ver as mudan√ßas.")
                        except Exception as e:
                            st.error(f"Erro ao renomear p√°gina: {str(e)}")
    
    with col2:
        st.subheader("Ferrramentas de Desenvolvimento")
        
        # Gerenciamento de permiss√µes
        with st.expander("Gerenciamento de Permiss√µes", expanded=True):
            st.write("Configure quais permiss√µes cada cargo possui no sistema:")
            
            # Carregar mapeamento de permiss√µes atual
            permissions_map = load_permissions_map()
            
            # Lista de cargos dispon√≠veis
            cargos = [
                "Desenvolvedor", 
                "Administrador", 
                "Gerente", 
                "T√©cnico", 
                "Operador", 
                "Visitante"
            ]
            
            # Lista de permiss√µes dispon√≠veis
            all_permissions = [
                # Administrativas
                {"id": "admin", "name": "Acesso Administrativo", "desc": "Acesso √†s configura√ß√µes administrativas"},
                {"id": "manage_users", "name": "Gerenciar Usu√°rios", "desc": "Adicionar, editar e excluir usu√°rios"},
                # Ferramentas
                {"id": "developer_tools", "name": "Ferramentas de Desenvolvedor", "desc": "Acesso √†s ferramentas de desenvolvimento"},
                {"id": "system_config", "name": "Configura√ß√µes de Sistema", "desc": "Modificar configura√ß√µes de sistema"},
                # Funcionalidades gerais
                {"id": "edit", "name": "Editar Registros", "desc": "Permiss√£o para adicionar e editar registros"},
                {"id": "view_reports", "name": "Visualizar Relat√≥rios", "desc": "Acesso aos relat√≥rios do sistema"},
                {"id": "export_data", "name": "Exportar Dados", "desc": "Exportar dados do sistema"},
                {"id": "import_data", "name": "Importar Dados", "desc": "Importar dados para o sistema"},
                # M√≥dulos espec√≠ficos
                {"id": "manage_animals", "name": "Gerenciar Animais", "desc": "Gerenciar cadastro e informa√ß√µes de animais"},
                {"id": "manage_reproduction", "name": "Gerenciar Reprodu√ß√£o", "desc": "Gerenciar ciclos reprodutivos e gesta√ß√µes"},
                {"id": "manage_health", "name": "Gerenciar Sa√∫de", "desc": "Gerenciar vacinas e registros de sa√∫de"},
                {"id": "manage_growth", "name": "Gerenciar Crescimento", "desc": "Gerenciar registros de peso e crescimento"}
            ]
    
    with col2:
        st.subheader("Ferrramentas de Desenvolvimento")
        
        # Gerenciamento de permiss√µes
        with st.expander("Gerenciamento de Permiss√µes", expanded=True):
            st.write("Configure quais permiss√µes cada cargo possui no sistema:")
            
            # Carregar mapeamento de permiss√µes atual
            permissions_map = load_permissions_map()
            
            # Lista de cargos dispon√≠veis
            cargos = [
                "Desenvolvedor", 
                "Administrador", 
                "Gerente", 
                "T√©cnico", 
                "Operador", 
                "Visitante"
            ]
            
            # Lista de permiss√µes dispon√≠veis
            all_permissions = [
                # Administrativas
                {"id": "admin", "name": "Acesso Administrativo", "desc": "Acesso √†s configura√ß√µes administrativas"},
                {"id": "manage_users", "name": "Gerenciar Usu√°rios", "desc": "Adicionar, editar e excluir usu√°rios"},
                # Ferramentas
                {"id": "developer_tools", "name": "Ferramentas de Desenvolvedor", "desc": "Acesso √†s ferramentas de desenvolvimento"},
                {"id": "system_config", "name": "Configura√ß√µes de Sistema", "desc": "Modificar configura√ß√µes de sistema"},
                # Funcionalidades gerais
                {"id": "edit", "name": "Editar Registros", "desc": "Permiss√£o para adicionar e editar registros"},
                {"id": "view_reports", "name": "Visualizar Relat√≥rios", "desc": "Acesso aos relat√≥rios do sistema"},
                {"id": "export_data", "name": "Exportar Dados", "desc": "Exportar dados do sistema"},
                {"id": "import_data", "name": "Importar Dados", "desc": "Importar dados para o sistema"},
                # M√≥dulos espec√≠ficos
                {"id": "manage_animals", "name": "Gerenciar Animais", "desc": "Gerenciar cadastro e informa√ß√µes de animais"},
                {"id": "manage_reproduction", "name": "Gerenciar Reprodu√ß√£o", "desc": "Gerenciar ciclos reprodutivos e gesta√ß√µes"},
                {"id": "manage_health", "name": "Gerenciar Sa√∫de", "desc": "Gerenciar vacinas e registros de sa√∫de"},
                {"id": "manage_growth", "name": "Gerenciar Crescimento", "desc": "Gerenciar registros de peso e crescimento"}
            ]
            
            # Selecionar cargo para configurar
            selected_cargo = st.selectbox(
                "Selecione o cargo para configurar as permiss√µes:",
                options=cargos
            )
            
            # Obter permiss√µes atuais para o cargo selecionado
            current_permissions = permissions_map.get(selected_cargo, [])
            
            # Criar checkboxes para cada permiss√£o
            st.write(f"Permiss√µes para o cargo: **{selected_cargo}**")
            
            # Dividir em 2 colunas para melhor visualiza√ß√£o
            perm_col1, perm_col2 = st.columns(2)
            
            # Preparar para coletar novas permiss√µes
            new_permissions = []
            
            with perm_col1:
                st.write("**Permiss√µes Administrativas:**")
                admin_perms = [p for p in all_permissions if p["id"] in ["admin", "manage_users", "developer_tools", "system_config"]]
                for perm in admin_perms:
                    checked = st.checkbox(
                        f"{perm['name']}",
                        value=perm["id"] in current_permissions,
                        help=perm["desc"],
                        key=f"perm_{selected_cargo}_{perm['id']}_1"
                    )
                    if checked:
                        new_permissions.append(perm["id"])
                        
                st.write("**Permiss√µes Gerais:**")
                general_perms = [p for p in all_permissions if p["id"] in ["edit", "view_reports", "export_data", "import_data"]]
                for perm in general_perms:
                    checked = st.checkbox(
                        f"{perm['name']}",
                        value=perm["id"] in current_permissions,
                        help=perm["desc"],
                        key=f"perm_{selected_cargo}_{perm['id']}_2"
                    )
                    if checked:
                        new_permissions.append(perm["id"])
            
            with perm_col2:
                st.write("**Permiss√µes de M√≥dulos:**")
                module_perms = [p for p in all_permissions if p["id"] in ["manage_animals", "manage_reproduction", "manage_health", "manage_growth"]]
                for perm in module_perms:
                    checked = st.checkbox(
                        f"{perm['name']}",
                        value=perm["id"] in current_permissions,
                        help=perm["desc"],
                        key=f"perm_{selected_cargo}_{perm['id']}_3"
                    )
                    if checked:
                        new_permissions.append(perm["id"])
            
            # Bot√£o para salvar as novas permiss√µes
            if st.button("Salvar Permiss√µes", key=f"save_{selected_cargo}"):
                # Atualizar o mapeamento de permiss√µes
                permissions_map[selected_cargo] = new_permissions
                
                # Salvar o mapeamento atualizado
                if save_permissions_map(permissions_map):
                    st.success(f"Permiss√µes do cargo {selected_cargo} atualizadas com sucesso!")
                else:
                    st.error("Erro ao salvar as permiss√µes. Tente novamente.")
        
        # Recarga do sistema
        with st.expander("Recarregamento do Sistema", expanded=True):
            st.write("Recarregue componentes do sistema sem reiniciar completamente:")
            
            # Op√ß√µes de recarga
            reload_option = st.selectbox(
                "Selecione o componente para recarregar:",
                ["M√≥dulos Python", "Configura√ß√µes", "Dados"]
            )
            
            if st.button("Recarregar", key="btn_reload"):
                if reload_option == "M√≥dulos Python":
                    try:
                        # Recarregar o m√≥dulo utils
                        import utils
                        importlib.reload(utils)
                        st.success("M√≥dulos Python recarregados com sucesso!")
                    except Exception as e:
                        st.error(f"Erro ao recarregar m√≥dulos: {str(e)}")
                
                elif reload_option == "Configura√ß√µes":
                    try:
                        # Recarregar configura√ß√µes
                        if os.path.exists("config.json"):
                            with open("config.json", "r") as f:
                                config = json.load(f)
                            st.success("Configura√ß√µes recarregadas com sucesso!")
                            st.json(config)
                        else:
                            st.warning("Arquivo de configura√ß√µes n√£o encontrado.")
                    except Exception as e:
                        st.error(f"Erro ao recarregar configura√ß√µes: {str(e)}")
                
                elif reload_option == "Dados":
                    try:
                        # For√ßar recarga de todos os dados
                        # Isso pode ser feito com uma fun√ß√£o que limpa qualquer cache
                        # Por exemplo, no Streamlit voc√™ pode criar uma chave de cache √∫nica
                        st.session_state["reload_flag"] = datetime.datetime.now().timestamp()
                        st.success("Dados marcados para recarga. Atualize a p√°gina para ver as mudan√ßas.")
                    except Exception as e:
                        st.error(f"Erro ao marcar dados para recarga: {str(e)}")
        
        # Limpeza de dados
        with st.expander("Manuten√ß√£o de Dados"):
            st.write("Ferramentas para manuten√ß√£o dos dados do sistema:")
            
            # Op√ß√µes de limpeza
            maintenance_option = st.selectbox(
                "Selecione a opera√ß√£o de manuten√ß√£o:",
                ["Verificar Inconsist√™ncias", "Reparar Estrutura de Dados", "Limpar Dados Tempor√°rios"]
            )
            
            if maintenance_option == "Verificar Inconsist√™ncias":
                if st.button("Iniciar Verifica√ß√£o", key="btn_check_inconsistencies"):
                    st.info("Verificando inconsist√™ncias nos dados... Este processo pode levar alguns minutos.")
                    
                    # Implementar verifica√ß√£o de inconsist√™ncias
                    # Por exemplo, verificar se todos os animais em gesta√ß√£o s√£o f√™meas
                    from utils import load_animals, load_gestation
                    
                    inconsistencies = []
                    
                    try:
                        animals_df = load_animals()
                        gestation_df = load_gestation()
                        
                        if not animals_df.empty and not gestation_df.empty:
                            # Mesclar dados para verificar
                            merged = pd.merge(
                                gestation_df, 
                                animals_df, 
                                on='id_animal', 
                                how='left'
                            )
                            
                            # Verificar se h√° machos em gesta√ß√£o (o que seria um erro)
                            males_gestation = merged[merged['sexo'] == 'M']
                            
                            if not males_gestation.empty:
                                for _, row in males_gestation.iterrows():
                                    inconsistencies.append({
                                        "tipo": "Erro L√≥gico",
                                        "descricao": f"Animal macho em gesta√ß√£o",
                                        "id_animal": row['id_animal'],
                                        "detalhe": f"Animal {row['identificacao']} est√° registrado como macho e em gesta√ß√£o"
                                    })
                        
                        # Exibir resultados
                        if inconsistencies:
                            st.error(f"Foram encontradas {len(inconsistencies)} inconsist√™ncias nos dados!")
                            
                            inc_df = pd.DataFrame(inconsistencies)
                            st.dataframe(inc_df, hide_index=True, use_container_width=True)
                        else:
                            st.success("N√£o foram encontradas inconsist√™ncias nos dados!")
                            
                    except Exception as e:
                        st.error(f"Erro ao verificar inconsist√™ncias: {str(e)}")
            
            elif maintenance_option == "Reparar Estrutura de Dados":
                st.warning("‚ö†Ô∏è Esta opera√ß√£o pode modificar seus dados. Certifique-se de fazer um backup antes de continuar.")
                
                if st.button("Reparar Estrutura", key="btn_repair"):
                    st.info("Reparando estrutura de dados... Este processo pode levar alguns minutos.")
                    
                    # Implementar reparo de estrutura
                    # Por exemplo, garantir que todos os arquivos CSV tenham as colunas corretas
                    # Isso √© apenas um exemplo, a l√≥gica real seria mais complexa
                    
                    # Fornecer feedback ao usu√°rio
                    st.success("Estrutura de dados reparada com sucesso!")
            
            elif maintenance_option == "Limpar Dados Tempor√°rios":
                if st.button("Limpar Tempor√°rios", key="btn_clean_temp"):
                    # Limpar arquivos tempor√°rios
                    temp_dir = "temp"
                    if os.path.exists(temp_dir):
                        import shutil
                        shutil.rmtree(temp_dir)
                        os.makedirs(temp_dir)
                        st.success(f"Diret√≥rio {temp_dir} limpo com sucesso!")
                    else:
                        os.makedirs(temp_dir)
                        st.info(f"Diret√≥rio {temp_dir} criado, pois n√£o existia.")

with tab5:
    st.markdown('<div class="dev-section"><h2>Downloads do Sistema</h2></div>', unsafe_allow_html=True)
    
    st.write("Baixe o sistema completo ou componentes espec√≠ficos para desenvolvimento local.")
    
    # Sempre criar um novo arquivo ZIP com a data atual
    import datetime
    current_date = datetime.datetime.now().strftime("%Y%m%d")
    zip_path = f"suinocultura_{current_date}.zip"
    
    # For√ßar a cria√ß√£o de um novo arquivo para garantir que esteja atualizado
    st.info("Preparando o arquivo para download... Por favor, aguarde.")
    import sys
    import importlib.util
    
    # Carregar e executar o script create_download_package.py
    spec = importlib.util.spec_from_file_location("create_download_package", "create_download_package.py")
    module = importlib.util.module_from_spec(spec)
    sys.modules["create_download_package"] = module
    spec.loader.exec_module(module)
    
    # Executar a fun√ß√£o
    module.create_download_package()
    
    # Fun√ß√£o para gerar o link de download
    def get_download_link(file_path, link_text):
        if not os.path.exists(file_path):
            st.error(f"Arquivo {file_path} n√£o encontrado!")
            return ""
        
        with open(file_path, "rb") as f:
            data = f.read()
        
        b64 = base64.b64encode(data).decode()
        href = f'<a href="data:application/zip;base64,{b64}" download="{os.path.basename(file_path)}" style="text-decoration:none;">'\
               f'<div style="background-color:#4CAF50; color:white; padding:12px 20px; border-radius:8px; '\
               f'cursor:pointer; text-align:center; font-weight:bold; margin:20px 0px;">{link_text}</div></a>'
        
        return href
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### Sistema Completo")
        st.write("""
        Este pacote cont√©m o c√≥digo-fonte completo do Sistema de Gest√£o Suinocultura, incluindo:
        - Todos os arquivos Python
        - Todas as p√°ginas da aplica√ß√£o
        - Arquivos de dados (CSVs)
        - Arquivos de configura√ß√£o
        """)
        
        # Mostrar o bot√£o de download
        if os.path.exists(zip_path):
            st.markdown(get_download_link(zip_path, "üì• DOWNLOAD DO SISTEMA COMPLETO"), unsafe_allow_html=True)
            
            file_size = round(os.path.getsize(zip_path) / (1024), 2)
            st.caption(f"Tamanho do arquivo: {file_size} KB | √öltima atualiza√ß√£o: {datetime.datetime.fromtimestamp(os.path.getmtime(zip_path)).strftime('%d/%m/%Y %H:%M')}")
        else:
            st.error("Arquivo de download n√£o est√° dispon√≠vel. Por favor, tente novamente mais tarde.")
    
    with col2:
        st.markdown("### Outras Op√ß√µes")
        
        # Bot√£o para gerar documenta√ß√£o
        if st.button("Gerar Documenta√ß√£o"):
            st.info("Gerando documenta√ß√£o... Este processo pode levar alguns minutos.")
            
            # Implementar gera√ß√£o de documenta√ß√£o
            # Exemplo: usar pydoc para gerar documenta√ß√£o das fun√ß√µes Python
            
            # Fornecer feedback ao usu√°rio
            st.success("Documenta√ß√£o gerada com sucesso!")
            
            # Aqui voc√™ poderia adicionar um link para download da documenta√ß√£o
        
        st.markdown("---")

# Aba de Atualiza√ß√µes do Sistema
with tab6:
    st.markdown('''
    <div style="background-color: #1E1E1E; color: #4FC3F7; padding: 1.5rem; border-radius: 10px; margin-bottom: 1rem; border-left: 5px solid #2196F3; font-family: 'Courier New', monospace;">
        <h2 style="margin:0; color: #4FC3F7; text-shadow: 0 0 5px rgba(79, 195, 247, 0.3);">üîÑ Hist√≥rico de Atualiza√ß√µes</h2>
        <p style="margin-top:0.5rem; color: #BBBBBB;">Registro completo de todas as atualiza√ß√µes e melhorias do sistema</p>
    </div>
    ''', unsafe_allow_html=True)
    
    # Fun√ß√£o para salvar token do GitHub de forma segura
    def save_github_credentials(username, token, repo_name, repo_owner):
        """
        Salva as credenciais do GitHub de forma segura
        
        Args:
            username (str): Nome de usu√°rio do GitHub
            token (str): Token de acesso pessoal do GitHub
            repo_name (str): Nome do reposit√≥rio
            repo_owner (str): Propriet√°rio do reposit√≥rio
            
        Returns:
            bool: True se salvo com sucesso, False caso contr√°rio
        """
        try:
            credentials = {
                "username": username,
                "token": token,
                "repo_name": repo_name,
                "repo_owner": repo_owner,
                "updated_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            credentials_file = "data/github_credentials.json"
            # Salvar credenciais
            with open(credentials_file, "w", encoding="utf-8") as f:
                json.dump(credentials, f, ensure_ascii=False, indent=4)
            
            return True, "Credenciais salvas com sucesso!"
        except Exception as e:
            return False, f"Erro ao salvar credenciais: {str(e)}"
    
    # Fun√ß√£o para carregar token do GitHub
    def load_github_credentials():
        """
        Carrega as credenciais do GitHub
        
        Returns:
            dict: Credenciais do GitHub ou None se n√£o existir
        """
        credentials_file = "data/github_credentials.json"
        
        if os.path.exists(credentials_file):
            try:
                with open(credentials_file, "r", encoding="utf-8") as f:
                    return json.load(f)
            except Exception:
                return None
        
        return None
    
    # Adicionar CSS espec√≠fico para atualiza√ß√µes com modo escuro
    st.markdown("""
    <style>
        /* Modo escuro para as atualiza√ß√µes */
        .update-card {
            background-color: #1E1E1E;
            border-left: 4px solid #2196F3;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }
        .update-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            border-bottom: 1px solid #333333;
            padding-bottom: 8px;
        }
        .update-version {
            font-size: 1.5rem;
            font-weight: bold;
            color: #4FC3F7;
            text-shadow: 0 0 5px rgba(79, 195, 247, 0.2);
        }
        .update-date {
            color: #BBBBBB;
            font-style: italic;
        }
        .update-description {
            font-size: 1.1rem;
            margin-bottom: 15px;
            color: #E0E0E0;
        }
        .change-item {
            background-color: #2D2D2D;
            border-radius: 5px;
            padding: 12px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            border-left: 3px solid #555555;
        }
        .change-new {
            border-left: 3px solid #4CAF50;
        }
        .change-improvement {
            border-left: 3px solid #2196F3;
        }
        .change-fix {
            border-left: 3px solid #FF9800;
        }
        .change-security {
            border-left: 3px solid #F44336;
        }
        .change-title {
            font-weight: bold;
            margin-bottom: 5px;
            color: #E0E0E0;
        }
        .change-description {
            color: #BBBBBB;
        }
        .change-type {
            display: inline-block;
            padding: 3px 6px;
            font-size: 0.8rem;
            border-radius: 3px;
            color: white;
            margin-right: 8px;
            box-shadow: 0 0 4px rgba(0,0,0,0.3);
        }
        .type-new {
            background-color: #4CAF50;
        }
        .type-improvement {
            background-color: #2196F3;
        }
        .type-fix {
            background-color: #FF9800;
        }
        .type-security {
            background-color: #F44336;
        }
        .add-update-form {
            background-color: #2D2D2D;
            padding: 20px;
            border-radius: 10px;
            margin-top: 30px;
            border: 1px solid #444444;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }
        
        /* Estilos para os bot√µes e inputs dentro do form de atualiza√ß√£o */
        .add-update-form input, 
        .add-update-form textarea,
        .add-update-form .stSelectbox>div>div {
            background-color: #333333 !important;
            color: #E0E0E0 !important;
            border: 1px solid #444444 !important;
        }
        
        .add-update-form button {
            background-color: #2196F3 !important;
            color: white !important;
        }
        
        /* Melhorias nas anima√ß√µes e efeitos de hover */
        .update-card {
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .update-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.4);
        }
        
        .change-item {
            transition: transform 0.2s;
        }
        
        .change-item:hover {
            transform: translateX(3px);
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Carregar hist√≥rico de atualiza√ß√µes
    update_file = "data/updates_history.json"
    
    if os.path.exists(update_file):
        try:
            with open(update_file, "r", encoding="utf-8") as f:
                updates_data = json.load(f)
            
            # Exibir todas as atualiza√ß√µes
            for version in updates_data.get("versoes", []):
                with st.container():
                    # Obter informa√ß√µes adicionais se dispon√≠veis
                    codigo_interno = version.get("codigo_interno", "")
                    impacto = version.get("impacto", "")
                    equipe = version.get("equipe_responsavel", "")
                    notas_importantes = version.get("notas_importantes", "")
                    
                    # Construir o cabe√ßalho com informa√ß√µes detalhadas
                    st.markdown(f'''
                    <div class="update-card">
                        <div class="update-header">
                            <div class="update-version">Vers√£o {version["versao"]}</div>
                            <div class="update-date">Lan√ßada em {version["data"]} por {version["autor"]}</div>
                        </div>
                        <div class="update-description">{version["descricao"]}</div>
                        
                        {f'<div class="update-notes" style="margin: 10px 0; padding: 10px; background-color: #FFF3CD; color: #856404; border-radius: 5px; border-left: 4px solid #FFD700;">{notas_importantes}</div>' if notas_importantes else ''}
                        
                        <div class="update-meta" style="display: flex; margin-bottom: 15px; font-size: 0.9rem; color: #BBBBBB;">
                            {f'<div style="margin-right: 20px;"><strong>C√≥digo:</strong> {codigo_interno}</div>' if codigo_interno else ''}
                            {f'<div style="margin-right: 20px;"><strong>Impacto:</strong> <span style="color: {"#FF5252" if impacto == "Alto" else "#FFC107" if impacto == "M√©dio" else "#4CAF50"};">{impacto}</span></div>' if impacto else ''}
                            {f'<div><strong>Equipe:</strong> {equipe}</div>' if equipe else ''}
                        </div>
                        
                        <div class="update-changes">
                    ''', unsafe_allow_html=True)
                    
                    # Exibir todas as mudan√ßas desta vers√£o
                    for change in version.get("mudancas", []):
                        change_type = change["tipo"]
                        change_class = ""
                        type_class = ""
                        
                        if "Nova Funcionalidade" in change_type:
                            change_class = "change-new"
                            type_class = "type-new"
                        elif "Melhoria" in change_type:
                            change_class = "change-improvement"
                            type_class = "type-improvement"
                        elif "Corre√ß√£o" in change_type:
                            change_class = "change-fix"
                            type_class = "type-fix"
                        elif "Seguran√ßa" in change_type:
                            change_class = "change-security"
                            type_class = "type-security"
                        
                        # Obter detalhes adicionais da mudan√ßa, se dispon√≠veis
                        detalhes_tecnicos = change.get("detalhes_tecnicos", "")
                        arquivos_alterados = change.get("arquivos_alterados", [])
                        horas_desenvolvimento = change.get("horas_desenvolvimento", "")
                        testes_realizados = change.get("testes_realizados", "")
                        
                        # Construir string de arquivos alterados
                        arquivos_html = ""
                        if arquivos_alterados:
                            arquivos_html = '<div style="margin-top: 10px;"><strong>Arquivos alterados:</strong><div style="display:flex; flex-wrap:wrap; gap:5px; margin-top:5px;">'
                            for arquivo in arquivos_alterados:
                                if arquivo.endswith(".py"):
                                    cor = "#3572A5"  # Cor do Python
                                elif arquivo.endswith(".json"):
                                    cor = "#F5BB12"  # Cor para JSON
                                elif arquivo.endswith(".csv"):
                                    cor = "#237346"  # Cor para CSV
                                elif arquivo.endswith(".java"):
                                    cor = "#B07219"  # Cor para Java
                                elif arquivo.endswith(".xml"):
                                    cor = "#0060AC"  # Cor para XML
                                elif arquivo.endswith(".toml"):
                                    cor = "#9C4221"  # Cor para TOML
                                else:
                                    cor = "#777777"  # Cor padr√£o
                                    
                                arquivos_html += f'<span style="background-color:{cor}25; color:{cor}; padding:3px 6px; border-radius:3px; font-size:0.8rem; border:1px solid {cor}50;">{arquivo}</span>'
                            arquivos_html += '</div></div>'
                        
                        # Detalhes t√©cnicos HTML
                        detalhes_tecnicos_html = ''
                        if detalhes_tecnicos:
                            detalhes_tecnicos_html = f'<div class="change-tech-details" style="margin-top:15px; background-color:#25232375; padding:10px; border-radius:5px; border-left:3px solid #555; font-size:0.9rem;"><strong style="color:#4FC3F7;">Detalhes T√©cnicos:</strong> {detalhes_tecnicos}</div>'
                        
                        # Testes HTML
                        testes_html = ''
                        if testes_realizados:
                            testes_html = f'<div style="margin-top:10px; font-style:italic; color:#BBBBBB; font-size:0.9rem;"><strong>Testes:</strong> {testes_realizados}</div>'
                        
                        # Horas de desenvolvimento HTML
                        horas_html = ''
                        if horas_desenvolvimento:
                            horas_html = f'<span style="float:right; font-size:0.8rem; color:#BBBBBB; padding:3px 8px; background-color:#333; border-radius:10px;">{horas_desenvolvimento}h</span>'
                        
                        # Construir HTML com todos os detalhes
                        st.markdown(f'''
                        <div class="change-item {change_class}">
                            <div class="change-title">
                                <span class="change-type {type_class}">{change_type}</span>
                                {change["titulo"]}
                                {horas_html}
                            </div>
                            <div class="change-description">{change["descricao"]}</div>
                            {detalhes_tecnicos_html}
                            {arquivos_html}
                            {testes_html}
                        </div>
                        ''', unsafe_allow_html=True)
                    
                    st.markdown('</div></div>', unsafe_allow_html=True)
                    st.markdown('---')
        except Exception as e:
            st.error(f"Erro ao carregar hist√≥rico de atualiza√ß√µes: {str(e)}")
    else:
        st.warning("O arquivo de hist√≥rico de atualiza√ß√µes n√£o foi encontrado. Crie o arquivo para come√ßar a registrar as atualiza√ß√µes do sistema.")
    
    # Separador
    st.markdown("---")
    
    # Formul√°rio para adicionar nova atualiza√ß√£o
    with st.expander("üÜï Adicionar Nova Atualiza√ß√£o", expanded=False):
        st.markdown('''
        <div class="add-update-form">
            <div style="margin-bottom: 15px; border-bottom: 1px solid #444; padding-bottom: 10px;">
                <h3 style="color: #4FC3F7; margin: 0; font-family: 'Courier New', monospace;">
                    <span style="color: #4CAF50;">+</span> Registrar Nova Vers√£o do Sistema
                </h3>
                <p style="color: #BBBBBB; margin-top: 5px;">
                    Preencha os detalhes abaixo para registrar uma nova vers√£o no hist√≥rico de atualiza√ß√µes
                </p>
            </div>
        ''', unsafe_allow_html=True)
        
        with st.form("add_update_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                versao = st.text_input("Vers√£o", placeholder="1.0.0")
                autor = st.text_input("Autor", value="Equipe de Desenvolvimento")
                codigo_interno = st.text_input("C√≥digo Interno", placeholder="RELEASE-SUINO-YYYY-MM")
                
            with col2:
                data = st.date_input("Data de Lan√ßamento", value=datetime.datetime.now())
                impacto = st.selectbox("Impacto", options=["Alto", "M√©dio", "Baixo"])
                equipe_responsavel = st.text_input("Equipe Respons√°vel", placeholder="Desenvolvimento Full-Stack")
                
            descricao = st.text_area("Descri√ß√£o da Vers√£o", placeholder="Descreva brevemente esta vers√£o")
            
            # Adicionar campo para notas importantes
            notas = st.text_area("Notas Importantes (opcional)", 
                                placeholder="Informa√ß√µes importantes sobre esta vers√£o, como avisos, requisitos especiais ou limita√ß√µes.",
                                help="Estas notas ser√£o destacadas no hist√≥rico de atualiza√ß√µes para chamar aten√ß√£o dos usu√°rios.")
            
            # Op√ß√£o para adicionar mudan√ßas
            st.subheader("Mudan√ßas nesta Vers√£o")
            
            num_changes = st.number_input("N√∫mero de mudan√ßas a adicionar", min_value=1, max_value=10, value=1)
            
            changes = []
            
            for i in range(int(num_changes)):
                st.markdown(f"### Mudan√ßa {i+1}")
                
                change_col1, change_col2 = st.columns(2)
                
                with change_col1:
                    change_type = st.selectbox(
                        f"Tipo de Mudan√ßa #{i+1}",
                        options=["Nova Funcionalidade", "Melhoria", "Corre√ß√£o", "Seguran√ßa"],
                        key=f"change_type_{i}"
                    )
                
                with change_col2:
                    change_title = st.text_input(
                        f"T√≠tulo #{i+1}",
                        placeholder="T√≠tulo curto e descritivo",
                        key=f"change_title_{i}"
                    )
                
                change_desc = st.text_area(
                    f"Descri√ß√£o Detalhada #{i+1}",
                    placeholder="Descreva com detalhes a mudan√ßa realizada",
                    key=f"change_desc_{i}"
                )
                
                # Detalhes t√©cnicos - sem usar expander (j√° estamos dentro de um form que est√° dentro de um expander)
                st.markdown(f"#### Detalhes T√©cnicos para Mudan√ßa #{i+1}")
                
                detalhes_tecnicos = st.text_area(
                    f"Detalhes T√©cnicos #{i+1}",
                    placeholder="Descreva detalhes t√©cnicos da implementa√ß√£o",
                    key=f"detalhes_tecnicos_{i}"
                )
                
                arquivos_alterados = st.text_area(
                    f"Arquivos Alterados #{i+1}",
                    placeholder="Lista de arquivos alterados (um por linha)",
                    key=f"arquivos_alterados_{i}"
                )
                
                horas_desenvolvimento = st.number_input(
                    f"Horas de Desenvolvimento #{i+1}",
                    min_value=0,
                    max_value=1000,
                    value=0,
                    key=f"horas_desenvolvimento_{i}"
                )
                
                testes_realizados = st.text_area(
                    f"Testes Realizados #{i+1}",
                    placeholder="Descreva os testes realizados para esta mudan√ßa",
                    key=f"testes_realizados_{i}"
                )
                
                st.markdown("---")  # Separador entre as se√ß√µes
                
                # Processar arquivos alterados como lista
                arquivos_list = []
                if arquivos_alterados.strip():
                    arquivos_list = [arquivo.strip() for arquivo in arquivos_alterados.strip().split('\n') if arquivo.strip()]
                
                change_data = {
                    "tipo": change_type,
                    "titulo": change_title,
                    "descricao": change_desc
                }
                
                # Adicionar campos opcionais se fornecidos
                if detalhes_tecnicos.strip():
                    change_data["detalhes_tecnicos"] = detalhes_tecnicos
                    
                if arquivos_list:
                    change_data["arquivos_alterados"] = arquivos_list
                    
                if horas_desenvolvimento > 0:
                    change_data["horas_desenvolvimento"] = horas_desenvolvimento
                    
                if testes_realizados.strip():
                    change_data["testes_realizados"] = testes_realizados
                
                changes.append(change_data)
            
            submit_button = st.form_submit_button("üíæ Salvar Nova Atualiza√ß√£o")
            
            if submit_button:
                if versao and descricao:
                    try:
                        # Verificar se j√° existe arquivo de atualiza√ß√µes
                        if os.path.exists(update_file):
                            with open(update_file, "r", encoding="utf-8") as f:
                                updates_data = json.load(f)
                        else:
                            updates_data = {"versoes": []}
                        
                        # Criar objeto da nova vers√£o
                        new_version = {
                            "versao": versao,
                            "data": data.strftime("%Y-%m-%d"),
                            "autor": autor,
                            "descricao": descricao,
                            "mudancas": [change for change in changes if change["titulo"] and change["descricao"]]
                        }
                        
                        # Adicionar campos opcionais se fornecidos
                        if codigo_interno.strip():
                            new_version["codigo_interno"] = codigo_interno
                            
                        if impacto:
                            new_version["impacto"] = impacto
                            
                        if equipe_responsavel.strip():
                            new_version["equipe_responsavel"] = equipe_responsavel
                            
                        # Adicionar notas importantes se fornecidas
                        if notas.strip():
                            new_version["notas_importantes"] = notas
                        
                        # Adicionar ao in√≠cio da lista
                        updates_data["versoes"].insert(0, new_version)
                        
                        # Salvar de volta ao arquivo
                        with open(update_file, "w", encoding="utf-8") as f:
                            json.dump(updates_data, f, ensure_ascii=False, indent=4)
                        
                        st.success("Atualiza√ß√£o adicionada com sucesso!")
                        st.info("Recarregue a p√°gina para ver as mudan√ßas.")
                        
                    except Exception as e:
                        st.error(f"Erro ao adicionar atualiza√ß√£o: {str(e)}")
                else:
                    st.error("Por favor, preencha todos os campos obrigat√≥rios (vers√£o e descri√ß√£o).")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Separador
    st.markdown("---")
    
    # Se√ß√£o de Integra√ß√£o com GitHub
    with st.expander("üåê Integra√ß√£o com GitHub", expanded=False):
        st.markdown('''
        <div class="add-update-form">
            <div style="margin-bottom: 15px; border-bottom: 1px solid #444; padding-bottom: 10px;">
                <h3 style="color: #4FC3F7; margin: 0; font-family: 'Courier New', monospace;">
                    <span style="color: #4CAF50;">‚öôÔ∏è</span> Configura√ß√£o do GitHub
                </h3>
                <p style="color: #BBBBBB; margin-top: 5px;">
                    Configure a integra√ß√£o com o GitHub para enviar atualiza√ß√µes do sistema
                </p>
            </div>
        ''', unsafe_allow_html=True)
        
        # Verificar se j√° existem credenciais
        github_credentials = load_github_credentials()
        
        if github_credentials:
            st.success(f"Credenciais do GitHub j√° configuradas para o reposit√≥rio: {github_credentials.get('repo_owner', '')}/{github_credentials.get('repo_name', '')}")
            st.info("√öltima atualiza√ß√£o: " + github_credentials.get('updated_at', ''))
            
            # Op√ß√£o para atualizar credenciais
            if st.checkbox("Atualizar credenciais"):
                with st.form("update_github_form"):
                    github_username = st.text_input("Nome de usu√°rio do GitHub", value=github_credentials.get('username', ''))
                    
                    # Instru√ß√µes detalhadas para o token
                    st.info("""
                    **Instru√ß√µes para criar um token do GitHub com as permiss√µes corretas:**
                    1. Acesse: https://github.com/settings/tokens
                    2. Clique em "Generate new token" (classic)
                    3. D√™ um nome como "Suinocultura App Access"
                    4. **Importante:** Selecione os seguintes escopos:
                       - `repo` (todos os subescopos)
                       - `workflow` 
                       - `admin:org` (opcional, se for para uma organiza√ß√£o)
                    5. Clique em "Generate token" e copie o token gerado
                    """)
                    
                    github_token = st.text_input("Token de acesso pessoal do GitHub", type="password")
                    github_repo_owner = st.text_input("Propriet√°rio do reposit√≥rio", value=github_credentials.get('repo_owner', ''),
                                                  help="Nome de usu√°rio ou organiza√ß√£o que possui o reposit√≥rio")
                    github_repo_name = st.text_input("Nome do reposit√≥rio", value=github_credentials.get('repo_name', ''),
                                                 help="O reposit√≥rio deve existir previamente no GitHub")
                    
                    update_button = st.form_submit_button("Atualizar credenciais")
                    
                    if update_button:
                        if github_username and github_token and github_repo_owner and github_repo_name:
                            success, message = save_github_credentials(
                                github_username, 
                                github_token,
                                github_repo_name,
                                github_repo_owner
                            )
                            
                            if success:
                                st.success(message)
                                st.rerun()
                            else:
                                st.error(message)
                        else:
                            st.error("Por favor, preencha todos os campos.")
        else:
            # Form para adicionar credenciais
            with st.form("add_github_form"):
                st.write("Para utilizar a integra√ß√£o com GitHub, voc√™ precisa configurar suas credenciais:")
                
                github_username = st.text_input("Nome de usu√°rio do GitHub")
                
                # Instru√ß√µes detalhadas para o token
                st.info("""
                **Instru√ß√µes para criar um token do GitHub com as permiss√µes corretas:**
                1. Acesse: https://github.com/settings/tokens
                2. Clique em "Generate new token" (classic)
                3. D√™ um nome como "Suinocultura App Access"
                4. **Importante:** Selecione os seguintes escopos:
                   - `repo` (todos os subescopos)
                   - `workflow` 
                   - `admin:org` (opcional, se for para uma organiza√ß√£o)
                5. Clique em "Generate token" e copie o token gerado
                """)
                
                github_token = st.text_input("Token de acesso pessoal do GitHub", type="password")
                github_repo_owner = st.text_input("Propriet√°rio do reposit√≥rio", 
                                              help="Nome de usu√°rio ou organiza√ß√£o que possui o reposit√≥rio")
                github_repo_name = st.text_input("Nome do reposit√≥rio", 
                                             help="O reposit√≥rio deve existir previamente no GitHub")
                
                submit_button = st.form_submit_button("Salvar credenciais")
                
                if submit_button:
                    if github_username and github_token and github_repo_owner and github_repo_name:
                        success, message = save_github_credentials(
                            github_username, 
                            github_token,
                            github_repo_name,
                            github_repo_owner
                        )
                        
                        if success:
                            st.success(message)
                            st.rerun()
                        else:
                            st.error(message)
                    else:
                        st.error("Por favor, preencha todos os campos.")
        
        # Fun√ß√£o para enviar para o GitHub
        def upload_to_github(files, commit_message, branch="main"):
            """
            Envia arquivos para o GitHub
            
            Args:
                files (list): Lista de caminhos de arquivos a serem enviados
                commit_message (str): Mensagem do commit
                branch (str): Nome do branch
                
            Returns:
                bool, str: Sucesso e mensagem
            """
            try:
                credentials = load_github_credentials()
                if not credentials:
                    return False, "Credenciais do GitHub n√£o configuradas."
                
                # Obter token e informa√ß√µes do repo
                github_token = credentials.get("token")
                repo_owner = credentials.get("repo_owner")
                repo_name = credentials.get("repo_name")
                
                # Inicializar cliente GitHub
                g = Github(github_token)
                
                # Verificar permiss√µes do token primeiro
                try:
                    # Tentar acessar o usu√°rio para verificar credenciais
                    g.get_user().login
                except Exception as e:
                    return False, f"""
                    Erro de autentica√ß√£o no GitHub: {str(e)}
                    
                    Verifique se o token √© v√°lido e possui as permiss√µes necess√°rias:
                    - Certifique-se de que o token tenha os escopos 'repo' completos
                    - Se o token expirou, gere um novo
                    - Verifique seus escopos acessando: https://github.com/settings/tokens
                    """
                
                try:
                    # Tentar obter o reposit√≥rio
                    repo = g.get_user(repo_owner).get_repo(repo_name)
                except Exception as e:
                    return False, f"""
                    Erro ao acessar o reposit√≥rio: {str(e)}
                    
                    Poss√≠veis causas:
                    - O reposit√≥rio '{repo_name}' n√£o existe ou √© privado
                    - Seu token n√£o tem acesso ao reposit√≥rio
                    - O nome do propriet√°rio '{repo_owner}' est√° incorreto
                    
                    Certifique-se de que o reposit√≥rio existe e que voc√™ tem permiss√µes de acesso.
                    """
                
                # Verificar se o branch existe
                try:
                    branch_ref = repo.get_branch(branch)
                except Exception as e:
                    return False, f"""
                    Branch '{branch}' n√£o encontrado: {str(e)}
                    
                    Solu√ß√µes:
                    - Verifique se o branch '{branch}' existe no reposit√≥rio
                    - Crie o branch no GitHub antes de tentar enviar arquivos
                    - Use 'main' ou 'master' como nome do branch se for um reposit√≥rio padr√£o
                    """
                
                # Obter o SHA do √∫ltimo commit no branch
                last_commit_sha = branch_ref.commit.sha
                base_tree = repo.get_git_tree(last_commit_sha)
                
                # Preparar os blobs para o commit
                element_list = []
                processed_files = 0
                skipped_files = 0
                
                for file_path in files:
                    if not os.path.exists(file_path):
                        skipped_files += 1
                        continue
                    
                    try:
                        with open(file_path, 'rb') as input_file:
                            data = input_file.read()
                        
                        # Criar o blob do arquivo
                        blob = repo.create_git_blob(base64.b64encode(data).decode(), "base64")
                        
                        # Adicionar o elemento √† lista
                        element = InputGitTreeElement(
                            # Remover o ./ do in√≠cio do caminho, se existir
                            path=file_path[2:] if file_path.startswith("./") else file_path,
                            mode='100644',
                            type='blob',
                            sha=blob.sha
                        )
                        element_list.append(element)
                        processed_files += 1
                        
                    except github.GithubException as ge:
                        # Erro espec√≠fico do GitHub
                        if ge.status == 403:  # Forbidden
                            return False, f"""
                            Erro de permiss√£o (403 Forbidden): {ge.data.get('message', 'Acesso negado')}
                            
                            O token n√£o tem permiss√µes suficientes para criar conte√∫do no reposit√≥rio.
                            Certifique-se de que:
                            1. O token tem o escopo 'repo' completo selecionado
                            2. Voc√™ tem permiss√£o de escrita no reposit√≥rio
                            3. N√£o h√° restri√ß√µes de branch protection que impe√ßam o push
                            
                            Se o erro persistir, tente criar um novo token com todas as permiss√µes necess√°rias.
                            """
                        else:
                            return False, f"Erro ao processar o arquivo {file_path}: {str(ge)}"
                    except Exception as e:
                        # Outros erros
                        return False, f"Erro ao processar o arquivo {file_path}: {str(e)}"
                
                if not element_list:
                    return False, f"Nenhum arquivo foi processado com sucesso. {skipped_files} arquivos ignorados."
                
                try:
                    # Criar uma nova √°rvore com os arquivos
                    new_tree = repo.create_git_tree(element_list, base_tree)
                    
                    # Criar um novo commit
                    parent = repo.get_git_commit(last_commit_sha)
                    new_commit = repo.create_git_commit(commit_message, new_tree, [parent])
                    
                    # Atualizar a refer√™ncia do branch
                    ref = repo.get_git_ref(f"heads/{branch}")
                    ref.edit(new_commit.sha)
                    
                    return True, f"Sucesso! {processed_files} arquivos enviados para o branch '{branch}'."
                
                except github.GithubException as ge:
                    if ge.status == 403:  # Forbidden
                        return False, f"""
                        Erro de permiss√£o (403 Forbidden): {ge.data.get('message', 'Acesso negado')}
                        
                        Seu token n√£o tem permiss√µes suficientes para esta opera√ß√£o.
                        Certifique-se de que seu token tenha os escopos corretos:
                        - 'repo' (acesso completo)
                        - 'workflow' (se estiver enviando arquivos de workflow)
                        
                        Voc√™ pode criar um novo token com as permiss√µes corretas em:
                        https://github.com/settings/tokens/new
                        """
                    else:
                        return False, f"Erro do GitHub: {ge.data.get('message', str(ge))}"
                
            except Exception as e:
                return False, f"Erro ao enviar arquivos para o GitHub: {str(e)}"
        
        # Fun√ß√£o para registrar automaticamente atualiza√ß√µes
        def registrar_atualizacao_automatica(commit_message, arquivos, success=True, notas_importantes=None):
            """
            Registra automaticamente uma atualiza√ß√£o no hist√≥rico quando arquivos s√£o enviados ao GitHub
            
            Args:
                commit_message (str): Mensagem do commit
                arquivos (list): Lista de arquivos enviados
                success (bool): Se o envio foi bem sucedido
                notas_importantes (str, optional): Notas importantes sobre a atualiza√ß√£o
                
            Returns:
                bool: True se a atualiza√ß√£o foi registrada com sucesso
            """
            try:
                update_file = "data/updates_history.json"
                
                # Verificar se j√° existe arquivo de atualiza√ß√µes
                if os.path.exists(update_file):
                    with open(update_file, "r", encoding="utf-8") as f:
                        updates_data = json.load(f)
                else:
                    updates_data = {"versoes": []}
                
                # Obter a √∫ltima vers√£o ou criar uma nova
                if updates_data["versoes"]:
                    ultima_versao = updates_data["versoes"][0]["versao"]
                    # Incrementar a √∫ltima parte da vers√£o (x.y.Z)
                    partes = ultima_versao.split('.')
                    if len(partes) >= 3:
                        partes[-1] = str(int(partes[-1]) + 1)
                        nova_versao = '.'.join(partes)
                    else:
                        nova_versao = ultima_versao + '.1'
                else:
                    nova_versao = "1.0.0"
                
                # Extrair informa√ß√µes √∫teis dos arquivos para a descri√ß√£o
                tipos_arquivos = {
                    "pages": 0,
                    "utils": 0,
                    "app": 0,
                    "config": 0,
                    "data": 0,
                    "other": 0
                }
                
                for arquivo in arquivos:
                    if arquivo.startswith("pages/"):
                        tipos_arquivos["pages"] += 1
                    elif arquivo == "utils.py":
                        tipos_arquivos["utils"] += 1
                    elif arquivo == "app.py":
                        tipos_arquivos["app"] += 1
                    elif arquivo.startswith(".streamlit/"):
                        tipos_arquivos["config"] += 1
                    elif arquivo.startswith("data/"):
                        tipos_arquivos["data"] += 1
                    else:
                        tipos_arquivos["other"] += 1
                
                # Criar descri√ß√£o resumida
                descricao_arquivos = []
                if tipos_arquivos["pages"] > 0:
                    descricao_arquivos.append(f"{tipos_arquivos['pages']} p√°ginas")
                if tipos_arquivos["utils"] > 0:
                    descricao_arquivos.append("utilit√°rios")
                if tipos_arquivos["app"] > 0:
                    descricao_arquivos.append("aplica√ß√£o principal")
                if tipos_arquivos["config"] > 0:
                    descricao_arquivos.append("configura√ß√µes")
                if tipos_arquivos["data"] > 0:
                    descricao_arquivos.append("arquivos de dados")
                if tipos_arquivos["other"] > 0:
                    descricao_arquivos.append(f"{tipos_arquivos['other']} outros arquivos")
                
                descricao_resumida = "Atualiza√ß√£o incluindo " + ", ".join(descricao_arquivos)
                
                # Criar mudan√ßas com base nos tipos de arquivos afetados
                mudancas = []
                
                # T√≠tulo principal baseado na mensagem de commit
                if commit_message:
                    titulo_principal = commit_message.split("\n")[0]
                else:
                    titulo_principal = f"Atualiza√ß√£o do sistema - {datetime.datetime.now().strftime('%d/%m/%Y')}"
                
                # Criar objeto de mudan√ßa principal
                mudanca_principal = {
                    "tipo": "Melhoria",
                    "titulo": titulo_principal,
                    "descricao": descricao_resumida,
                    "arquivos_alterados": [a for a in arquivos[:20]]  # Limitar a 20 arquivos para n√£o sobrecarregar
                }
                
                # Se houver muitos arquivos, adicionar informa√ß√£o
                if len(arquivos) > 20:
                    mudanca_principal["descricao"] += f"\n\nTotal de {len(arquivos)} arquivos atualizados."
                
                mudancas.append(mudanca_principal)
                
                # Adicionar detalhes espec√≠ficos conforme os tipos de arquivos
                if tipos_arquivos["pages"] > 0:
                    paginas_atualizadas = [a for a in arquivos if a.startswith("pages/")][:10]  # Primeiras 10 p√°ginas
                    mudancas.append({
                        "tipo": "Melhoria",
                        "titulo": f"Atualiza√ß√£o de {tipos_arquivos['pages']} p√°ginas",
                        "descricao": f"Atualiza√ß√£o das interfaces e funcionalidades do sistema",
                        "arquivos_alterados": paginas_atualizadas
                    })
                
                # Criar objeto da nova vers√£o
                new_version = {
                    "versao": nova_versao,
                    "data": datetime.datetime.now().strftime("%Y-%m-%d"),
                    "autor": "Atualiza√ß√£o Autom√°tica via GitHub",
                    "descricao": f"Atualiza√ß√£o autom√°tica via commit no GitHub: {commit_message}",
                    "mudancas": mudancas,
                    "codigo_interno": f"AUTO-GITHUB-{datetime.datetime.now().strftime('%Y%m%d%H%M')}",
                    "impacto": "M√©dio",
                    "equipe_responsavel": "Equipe de Desenvolvimento"
                }
                
                # Adicionar notas importantes (personalizadas ou padr√£o)
                if notas_importantes and notas_importantes.strip():
                    new_version["notas_importantes"] = notas_importantes
                else:
                    new_version["notas_importantes"] = "‚ö†Ô∏è Esta atualiza√ß√£o foi gerada automaticamente pelo sistema de integra√ß√£o com GitHub. Verifique os arquivos atualizados para mais detalhes."
                
                # Adicionar ao in√≠cio da lista
                updates_data["versoes"].insert(0, new_version)
                
                # Limitar o n√∫mero de vers√µes para evitar arquivo muito grande
                if len(updates_data["versoes"]) > 100:
                    updates_data["versoes"] = updates_data["versoes"][:100]
                
                # Salvar de volta ao arquivo
                with open(update_file, "w", encoding="utf-8") as f:
                    json.dump(updates_data, f, ensure_ascii=False, indent=4)
                
                return True
            except Exception as e:
                st.warning(f"Erro ao registrar atualiza√ß√£o autom√°tica: {str(e)}")
                return False

        # Interface para enviar arquivos para o GitHub
        if github_credentials:
            st.markdown("<br><h4>Enviar Arquivos para o GitHub</h4>", unsafe_allow_html=True)
            
            with st.form("github_upload_form"):
                # Op√ß√µes de pastas para enviar
                st.write("Selecione quais pastas deseja enviar para o GitHub:")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    send_pages = st.checkbox("P√°ginas (pages/)", value=True)
                    send_utils = st.checkbox("Utilit√°rios (utils.py)", value=True)
                    send_app = st.checkbox("Aplica√ß√£o principal (app.py)", value=True)
                    send_data = st.checkbox("Dados (data/)", value=False)
                
                with col2:
                    send_config = st.checkbox("Configura√ß√µes (.streamlit/)", value=True)
                    send_requirements = st.checkbox("Depend√™ncias (pyproject.toml, requirements.txt)", value=True)
                    send_download = st.checkbox("P√°gina de download (download_page/)", value=True)
                    send_android = st.checkbox("Base do App Android (android_app_base/)", value=False)
                
                # Op√ß√£o para registrar atualiza√ß√£o automaticamente
                registrar_auto = st.checkbox("Registrar atualiza√ß√£o automaticamente", value=True, 
                                          help="Adiciona automaticamente uma entrada no hist√≥rico de atualiza√ß√µes quando o envio for bem-sucedido")
                
                # Notas importantes personalizadas para atualiza√ß√µes autom√°ticas
                notas_personalizadas = ""
                if registrar_auto:
                    notas_personalizadas = st.text_area("Notas importantes para o registro autom√°tico (opcional)", 
                                                   placeholder="Informa√ß√µes importantes sobre esta atualiza√ß√£o, como altera√ß√µes cr√≠ticas ou instru√ß√µes especiais",
                                                   help="Estas notas ser√£o destacadas no hist√≥rico de atualiza√ß√µes")
                
                # Mensagem personalizada do commit
                commit_message = st.text_area("Mensagem do commit", 
                                            placeholder="Ex: Atualiza√ß√£o do sistema com novas funcionalidades e corre√ß√µes",
                                            value=f"Atualiza√ß√£o autom√°tica via Sistema Suinocultura - {datetime.datetime.now().strftime('%d/%m/%Y %H:%M')}")
                
                # Branch para enviar
                branch = st.text_input("Branch", value="main")
                
                # Bot√£o para enviar
                submit_button = st.form_submit_button("Enviar para GitHub")
                
                if submit_button:
                    files_to_send = []
                    
                    # Adicionar arquivos com base nas sele√ß√µes
                    if send_pages:
                        # Adicionar todos os arquivos da pasta pages
                        for root, _, files in os.walk("pages"):
                            for file in files:
                                files_to_send.append(os.path.join(root, file))
                    
                    if send_utils:
                        files_to_send.append("utils.py")
                    
                    if send_app:
                        files_to_send.append("app.py")
                    
                    if send_config and os.path.exists(".streamlit"):
                        # Adicionar todos os arquivos da pasta .streamlit
                        for root, _, files in os.walk(".streamlit"):
                            for file in files:
                                files_to_send.append(os.path.join(root, file))
                    
                    if send_requirements:
                        if os.path.exists("pyproject.toml"):
                            files_to_send.append("pyproject.toml")
                        if os.path.exists("requirements.txt"):
                            files_to_send.append("requirements.txt")
                    
                    if send_data:
                        # Adicionar todos os arquivos da pasta data (exceto credentials)
                        for root, _, files in os.walk("data"):
                            for file in files:
                                if "credentials" not in file:  # Evitar enviar credenciais
                                    files_to_send.append(os.path.join(root, file))
                    
                    if send_download and os.path.exists("download_page"):
                        # Adicionar todos os arquivos da pasta download_page
                        for root, _, files in os.walk("download_page"):
                            for file in files:
                                files_to_send.append(os.path.join(root, file))
                    
                    if send_android and os.path.exists("android_app_base"):
                        # Adicionar todos os arquivos da pasta android_app_base
                        for root, _, files in os.walk("android_app_base"):
                            for file in files:
                                files_to_send.append(os.path.join(root, file))
                    
                    # Verificar se h√° arquivos para enviar
                    if not files_to_send:
                        st.error("Nenhum arquivo selecionado para enviar.")
                    else:
                        # Mostrar quais arquivos ser√£o enviados
                        st.write("**Arquivos selecionados para envio:**")
                        for file in sorted(files_to_send)[:10]:  # Mostrar apenas os primeiros 10 arquivos
                            st.text(file)
                        
                        if len(files_to_send) > 10:
                            st.text(f"... e mais {len(files_to_send) - 10} arquivos")
                        
                        st.info(f"Total: {len(files_to_send)} arquivos selecionados para envio")
                        
                        # Confirmar envio
                        import time
                        with st.spinner("Enviando arquivos para o GitHub..."):
                            time.sleep(1)  # Pequena pausa para dar feedback visual
                            success, message = upload_to_github(files_to_send, commit_message, branch)
                        
                        if success:
                            st.success(message)
                            # Adicionar link para o reposit√≥rio
                            repo_link = f"https://github.com/{github_credentials.get('repo_owner', '')}/{github_credentials.get('repo_name', '')}"
                            st.markdown(f"[Ver reposit√≥rio no GitHub]({repo_link})")
                            
                            # Registrar atualiza√ß√£o automaticamente se a op√ß√£o estiver marcada
                            if registrar_auto:
                                with st.spinner("Registrando atualiza√ß√£o no hist√≥rico..."):
                                    if registrar_atualizacao_automatica(commit_message, files_to_send, True, notas_personalizadas):
                                        st.success("‚úÖ Atualiza√ß√£o registrada automaticamente no hist√≥rico")
                                    else:
                                        st.warning("‚ö†Ô∏è N√£o foi poss√≠vel registrar a atualiza√ß√£o no hist√≥rico")
                        else:
                            st.error(message)
            
            # Hist√≥rico dos √∫ltimos envios
            st.markdown("<h4>Sugest√µes de uso</h4>", unsafe_allow_html=True)
            st.markdown("""
            - **Recomendado**: Envie apenas as p√°ginas e arquivos que foram modificados
            - Evite enviar dados sens√≠veis ou arquivos de grande tamanho
            - Certifique-se de que o reposit√≥rio exista e que o token tenha permiss√µes de escrita
            - Utilize mensagens de commit descritivas para facilitar o rastreamento das altera√ß√µes
            """)
            
            # Adicionar aviso sobre tokens do GitHub
            st.warning("""
            **‚ö†Ô∏è Importante sobre Tokens do GitHub**
            
            Para evitar erros de permiss√£o (403 Forbidden), certifique-se de que seu token pessoal tenha as seguintes permiss√µes:
            - Permiss√£o completa para `repo` (acesso a reposit√≥rios privados)
            - Se voc√™ estiver usando o novo sistema de tokens de acesso refinados (fine-grained tokens), garanta as permiss√µes:
              - `Contents: Read and write` (para ler e modificar arquivos)
              - `Metadata: Read-only` (para acessar metadados do reposit√≥rio)
              
            Tokens expirados ou com permiss√µes insuficientes resultar√£o em falhas no envio.
            """)
        
        st.markdown('</div>', unsafe_allow_html=True)

# Aba Kivy Mobile

    
    # Aba 1 - WebView Personalizado
    with apk_tab1:
        st.subheader("Personalize seu APK WebView")
        
        col1, col2 = st.columns([2, 1])
        
        # Coluna 1 - Formul√°rio principal
        with col1:
            with st.form("apk_webview_form"):
                st.markdown("### Configura√ß√µes B√°sicas")
                
                app_name = st.text_input("Nome do Aplicativo", 
                                         value=st.session_state.apk_app_name,
                                         help="Nome que aparecer√° no dispositivo do usu√°rio")
                                         
                package_name = st.text_input("Nome do Pacote", 
                                            value=st.session_state.apk_package_name,
                                            help="Identificador √∫nico do aplicativo, formato: com.example.app")
                                            
                app_version = st.text_input("Vers√£o", 
                                           value=st.session_state.apk_version,
                                           help="Vers√£o do aplicativo (ex: 1.0.0)")
                                           
                app_url = st.text_input("URL do Sistema Suinocultura", 
                                       value=st.session_state.apk_url,
                                       help="URL completa da aplica√ß√£o web (incluindo https://)")
                
                st.markdown("### Personaliza√ß√£o Visual")
                
                app_color = st.color_picker("Cor Principal", 
                                           value=st.session_state.apk_primary_color,
                                           help="Cor principal do aplicativo")
                                           
                dark_mode = st.checkbox("Habilitar Modo Escuro", 
                                       value=st.session_state.apk_dark_mode,
                                       help="Aplica tema escuro ao aplicativo")
                                       
                enable_splash = st.checkbox("Tela de Splash", 
                                          value=st.session_state.apk_splash_screen,
                                          help="Exibe uma tela de abertura ao iniciar o aplicativo")
                
                st.markdown("### Configura√ß√µes T√©cnicas")
                                       
                enable_cache = st.checkbox("Habilitar Cache", 
                                         value=st.session_state.apk_enable_cache,
                                         help="Permite que o aplicativo armazene dados em cache para uso offline")
                                         
                enable_zoom = st.checkbox("Permitir Zoom", 
                                        value=st.session_state.apk_enable_zoom,
                                        help="Permite que o usu√°rio use gestos de zoom na aplica√ß√£o")
                                        
                offline_message = st.text_area("Mensagem Offline", 
                                             value=st.session_state.apk_offline_message,
                                             help="Mensagem exibida quando o aplicativo est√° sem conex√£o")
                
                submitted = st.form_submit_button("Gerar APK WebView", type="primary")
                
                if submitted:
                    # Salvar configura√ß√µes na session state
                    st.session_state.apk_app_name = app_name
                    st.session_state.apk_package_name = package_name
                    st.session_state.apk_version = app_version
                    st.session_state.apk_url = app_url
                    st.session_state.apk_primary_color = app_color
                    st.session_state.apk_dark_mode = dark_mode
                    st.session_state.apk_enable_cache = enable_cache
                    st.session_state.apk_enable_zoom = enable_zoom
                    st.session_state.apk_splash_screen = enable_splash
                    st.session_state.apk_offline_message = offline_message
                    
                    # Gerar APK WebView usando o simpler_webview_app_creator.py
                    try:
                        with st.spinner("Gerando projeto Android WebView..."):
                            # Importar e executar o script
                            import importlib.util
                            
                            # Carregar o script
                            spec = importlib.util.spec_from_file_location("simpler_webview_app_creator", "simpler_webview_app_creator.py")
                            webview_creator = importlib.util.module_from_spec(spec)
                            spec.loader.exec_module(webview_creator)
                            
                            # Sobrescrever as configura√ß√µes no m√≥dulo
                            webview_creator.APP_NAME = app_name
                            webview_creator.PACKAGE_NAME = package_name
                            webview_creator.VERSION = app_version
                            webview_creator.URL = app_url
                            
                            # Criar pasta tempor√°ria para o projeto
                            project_dir = "android_webview_project"
                            if os.path.exists(project_dir):
                                shutil.rmtree(project_dir)
                            
                            # Executar cria√ß√£o do projeto
                            os.makedirs(project_dir, exist_ok=True)
                            
                            # Alterar o diret√≥rio de trabalho
                            original_dir = os.getcwd()
                            os.chdir(project_dir)
                            
                            # Criar estrutura do projeto
                            webview_creator.create_project_structure()
                            webview_creator.create_manifest()
                            webview_creator.create_main_activity()
                            webview_creator.create_layout()
                            webview_creator.create_strings()
                            webview_creator.create_colors()
                            webview_creator.create_build_gradle()
                            webview_creator.create_gradle_wrapper()
                            webview_creator.create_settings_gradle()
                            webview_creator.create_icon()
                            
                            # Aplicar personaliza√ß√µes adicionais
                            # Aqui voc√™ pode modificar os arquivos gerados para adicionar as personaliza√ß√µes extras
                            
                            # Criar ZIP
                            zip_path = webview_creator.create_project_zip()
                            
                            # Criar guia HTML
                            html_guide_path = webview_creator.create_online_apk_guide()
                            
                            # Criar a alternativa direta
                            direct_apk_path = webview_creator.create_direct_apk_alternative()
                            
                            # Voltar ao diret√≥rio original
                            os.chdir(original_dir)
                            
                            st.success("Projeto para gera√ß√£o de APK WebView criado com sucesso!")
                            
                            # Op√ß√£o para download do projeto
                            zip_file = f"{project_dir}.zip"
                            if os.path.exists(zip_file):
                                with open(zip_file, "rb") as file:
                                    btn = st.download_button(
                                        label="üì• Download do Projeto Android",
                                        data=file,
                                        file_name=zip_file,
                                        mime="application/zip",
                                        help="Baixe o projeto Android completo para compilar localmente"
                                    )
                            
                            # Exibir instru√ß√µes
                            st.info("Siga as instru√ß√µes abaixo para compilar o APK ou use o m√©todo online.")
                            
                    except Exception as e:
                        st.error(f"Erro ao gerar o projeto: {str(e)}")
                        import traceback
                        st.code(traceback.format_exc())
                        
        # Coluna 2 - Preview e instru√ß√µes
        with col2:
            st.markdown("### Preview do Aplicativo")
            
            # Mostrar preview do aplicativo
            preview_color = st.session_state.apk_primary_color
            preview_name = st.session_state.apk_app_name
            preview_dark = st.session_state.apk_dark_mode
            
            # Gerar um preview simulado do aplicativo
            bg_color = "#121212" if preview_dark else "#FFFFFF"
            text_color = "#FFFFFF" if preview_dark else "#000000"
            status_bar_color = "#000000" if preview_dark else "#EEEEEE"
            
            st.markdown(f"""
            <div style="border: 1px solid #AAA; border-radius: 10px; overflow: hidden; width: 220px; margin: 0 auto; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
                <!-- Status Bar -->
                <div style="background-color: {status_bar_color}; color: {'#FFFFFF' if preview_dark else '#777777'}; height: 20px; font-size: 10px; display: flex; align-items: center; justify-content: flex-end; padding: 0 5px;">
                    <span>12:34 PM</span>
                </div>
                
                <!-- Action Bar -->
                <div style="background-color: {preview_color}; color: white; padding: 10px; text-align: left; font-weight: bold; font-size: 14px;">
                    {preview_name}
                </div>
                
                <!-- Content Area -->
                <div style="background-color: {bg_color}; color: {text_color}; height: 320px; position: relative; overflow: hidden;">
                    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center;">
                        <div style="width: 50px; height: 50px; border-radius: 50%; background-color: {preview_color}; display: flex; align-items: center; justify-content: center; margin: 0 auto 10px auto;">
                            <span style="color: white; font-size: 24px;">üê∑</span>
                        </div>
                        <div style="color: {text_color};">Carregando...</div>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("<br>", unsafe_allow_html=True)
            
            # Dicas
            st.markdown("### Dicas")
            
            st.info("""
            - Use cores que combinem com a identidade visual do sistema
            - O modo escuro √© recomendado para reduzir o consumo de bateria em telas OLED
            - O cache permite uso parcial do app sem conex√£o
            """)
            
    # Aba 2 - Configura√ß√µes Avan√ßadas
    with apk_tab2:
        st.subheader("Configura√ß√µes Avan√ßadas")
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.markdown("### Comportamento do WebView")
            
            javascript_enabled = st.checkbox("Habilitar JavaScript", value=True, 
                                           help="Permite a execu√ß√£o de JavaScript no WebView")
            
            hardware_acceleration = st.checkbox("Acelera√ß√£o de Hardware", value=True, 
                                              help="Utiliza GPU para renderiza√ß√£o mais r√°pida")
            
            dom_storage = st.checkbox("DOM Storage", value=True, 
                                     help="Permite armazenamento local persistente")
                                     
            database_storage = st.checkbox("Database Storage", value=True, 
                                         help="Permite uso de bancos de dados locais (SQLite)")
                                         
            file_access = st.checkbox("Acesso a Arquivos", value=True, 
                                     help="Permite que o aplicativo acesse arquivos locais")
            
            st.markdown("### Permiss√µes")
            
            permission_internet = st.checkbox("Internet", value=True, disabled=True, 
                                            help="Acesso √† internet (obrigat√≥rio)")
            
            permission_network_state = st.checkbox("Estado da Rede", value=True, 
                                                 help="Verificar o estado da conex√£o")
            
            permission_storage = st.checkbox("Armazenamento", value=False, 
                                           help="Acesso ao armazenamento do dispositivo")
            
            permission_camera = st.checkbox("C√¢mera", value=False, 
                                          help="Acesso √† c√¢mera para captura de imagens")
            
            permission_location = st.checkbox("Localiza√ß√£o", value=False, 
                                            help="Acesso √† localiza√ß√£o do dispositivo")
        
        with col2:
            st.markdown("### Configura√ß√µes de Interface")
            
            orientation = st.radio("Orienta√ß√£o da Tela", 
                                  options=["portrait", "landscape", "sensor"],
                                  index=0,
                                  help="Orienta√ß√£o preferida do aplicativo")
            
            fullscreen = st.checkbox("Tela Cheia", value=False, 
                                    help="Executa o aplicativo em modo de tela cheia")
            
            keep_screen_on = st.checkbox("Manter Tela Ligada", value=False, 
                                        help="Evita que a tela se desligue durante o uso do aplicativo")
            
            st.markdown("### Configura√ß√µes de Build")
            
            min_sdk = st.slider("Android M√≠nimo", min_value=16, max_value=33, value=21, 
                               help="Vers√£o m√≠nima do Android suportada (21 = Android 5.0)")
            
            target_sdk = st.slider("Android Alvo", min_value=min_sdk, max_value=33, value=33, 
                                  help="Vers√£o alvo do Android")
            
            accept_advanced = st.button("Aplicar Configura√ß√µes Avan√ßadas", type="primary")
            
            if accept_advanced:
                st.success("Configura√ß√µes avan√ßadas aplicadas com sucesso!")
                
            st.info("""
            **Nota:** As configura√ß√µes avan√ßadas exigem conhecimento de desenvolvimento 
            Android e podem afetar a compatibilidade do aplicativo em alguns dispositivos.
            """)
    
    # Aba 3 - M√©todos de Compila√ß√£o
    with apk_tab3:
        st.subheader("M√©todos para Compila√ß√£o")
        
        st.markdown("""
        Existem v√°rias maneiras de compilar o APK WebView gerado. Escolha a op√ß√£o que melhor se adapta √†s suas necessidades:
        """)
        
        # M√©todo 1 - Servi√ßo Online
        st.markdown("### 1. Servi√ßo Online")
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.markdown("""
            **O que √©:** Servi√ßos online que permitem fazer upload do seu projeto Android e receber um APK compilado.
            
            **Vantagens:**
            - N√£o requer instala√ß√£o de ferramentas
            - Processo r√°pido e simples
            - Funciona em qualquer sistema operacional
            
            **Desvantagens:**
            - Menos personaliza√ß√£o
            - Pode ter limita√ß√µes em servi√ßos gratuitos
            - Requer upload do c√≥digo-fonte
            """)
        
        with col2:
            st.markdown("""
            **Recomendado para:**
            - Usu√°rios iniciantes
            - Testes r√°pidos
            - Quem n√£o tem ambiente de desenvolvimento
            """)
        
        # Bot√£o para abrir o guia de servi√ßo online
        if st.button("Abrir Guia de Servi√ßo Online", type="secondary"):
            # Verificar se o arquivo existente
            html_guide_path = "download_page/buildozer_online_guide.html"
            
            if os.path.exists(html_guide_path):
                # Abrir o arquivo HTML em uma nova guia usando JavaScript
                js_code = f"""
                <script>
                    window.open('/download_page/buildozer_online_guide.html', '_blank');
                </script>
                """
                st.markdown(js_code, unsafe_allow_html=True)
                st.success("Guia aberto em uma nova guia!")
            else:
                st.error("Guia n√£o encontrado. Execute primeiro a gera√ß√£o do APK.")
        
        st.markdown("---")
        
        # M√©todo 2 - Android Studio
        st.markdown("### 2. Android Studio")
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.markdown("""
            **O que √©:** O ambiente de desenvolvimento oficial para Android.
            
            **Vantagens:**
            - Controle total sobre o processo de compila√ß√£o
            - Possibilidade de depura√ß√£o avan√ßada
            - Mais op√ß√µes de personaliza√ß√£o
            
            **Desvantagens:**
            - Requer instala√ß√£o do Android Studio (+ 8GB)
            - Curva de aprendizado mais alta
            - Consome mais recursos do computador
            """)
        
        with col2:
            st.markdown("""
            **Recomendado para:**
            - Desenvolvedores
            - Projetos mais complexos
            - Quando precisar de recursos avan√ßados
            """)
        
        st.code("""
        # Passos para compilar no Android Studio:
        1. Descompacte o arquivo ZIP do projeto
        2. Abra o Android Studio
        3. Selecione "Open an Existing Project"
        4. Navegue at√© a pasta do projeto descompactado
        5. Aguarde a sincroniza√ß√£o do Gradle
        6. Clique em Build > Build Bundle(s) / APK(s) > Build APK(s)
        7. Aguarde a compila√ß√£o e clique em "locate" para encontrar o APK
        """, language="bash")
        
        st.markdown("---")
        
        # M√©todo 3 - Buildozer
        st.markdown("### 3. Compila√ß√£o Direta com Buildozer")
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.markdown("""
            **O que √©:** Ferramenta que permite compilar aplicativos Python/Kivy para Android.
            
            **Vantagens:**
            - Linha de comando simples
            - Automa√ß√£o poss√≠vel
            - Menos recursos que o Android Studio
            
            **Desvantagens:**
            - Requer ambiente Linux
            - Instala√ß√£o de v√°rias depend√™ncias
            - Pode ter problemas de compatibilidade
            """)
        
        with col2:
            st.markdown("""
            **Recomendado para:**
            - Usu√°rios do Linux
            - Desenvolvimento em servidor
            - Quem prefere linha de comando
            """)
        
        st.code("""
        # Instala√ß√£o no Ubuntu/Debian:
        sudo apt update
        sudo apt install -y git zip unzip openjdk-11-jdk python3-pip autoconf libtool pkg-config
        sudo apt install -y libncurses5-dev libncursesw5-dev zlib1g-dev
        sudo pip3 install --upgrade Cython==0.29.33 virtualenv buildozer
        
        # Compilar o APK:
        buildozer -v android debug
        """, language="bash")
        
        st.warning("""
        **Aviso:** A compila√ß√£o direta com Buildozer pode exigir configura√ß√µes adicionais
        e √© recomendada apenas para usu√°rios avan√ßados.
        """)
        
        # M√©todo 4 - Compilar Online com PWA
        st.markdown("### 4. Progressive Web App (PWA)")
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.markdown("""
            **O que √©:** Converter seu site em um PWA que pode ser instalado diretamente do navegador.
            
            **Vantagens:**
            - Instala√ß√£o direta pelo navegador
            - N√£o requer compila√ß√£o
            - Atualiza√ß√µes autom√°ticas
            
            **Desvantagens:**
            - Acesso limitado aos recursos do dispositivo
            - Menos integrado ao sistema operacional
            - Requer conex√£o para primeira instala√ß√£o
            """)
        
        with col2:
            st.markdown("""
            **Recomendado para:**
            - Solu√ß√µes r√°pidas
            - Aplica√ß√µes simples
            - Quando APK n√£o √© estritamente necess√°rio
            """)
        
        # Bot√£o para ativar PWA
        if st.button("Transformar em PWA", type="secondary"):
            st.info("""
            Para transformar o Sistema Suinocultura em um PWA, adicione um manifesto
            web e service worker ao seu projeto Streamlit. Um guia detalhado est√° dispon√≠vel
            na documenta√ß√£o.
            
            Usu√°rios poder√£o instalar o PWA diretamente do Chrome/Edge ao acessar o site.
            """)
        
        st.markdown("---")
        
        # Se√ß√£o final com ajuda
        st.markdown("### Precisa de ajuda?")
        
        st.info("""
        Se voc√™ estiver com dificuldades para compilar o APK, entre em contato
        com a equipe de desenvolvimento ou consulte os recursos dispon√≠veis na 
        documenta√ß√£o do Android.
        """)
            
        # Bot√µes de a√ß√£o
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("<div style='text-align: center;'>", unsafe_allow_html=True)
            if st.button("üìñ Documenta√ß√£o", type="secondary"):
                st.markdown("Acessando documenta√ß√£o...")
            st.markdown("</div>", unsafe_allow_html=True)
            
        with col2:
            st.markdown("<div style='text-align: center;'>", unsafe_allow_html=True)
            if st.button("ü§î FAQ", type="secondary"):
                st.markdown("Exibindo perguntas frequentes...")
            st.markdown("</div>", unsafe_allow_html=True)
            
        with col3:
            st.markdown("<div style='text-align: center;'>", unsafe_allow_html=True)
            if st.button("üé¨ Tutorial em V√≠deo", type="secondary"):
                st.markdown("Iniciando tutorial em v√≠deo...")
            st.markdown("</div>", unsafe_allow_html=True)
    
    # Estilos baseados no modo selecionado
    bg_color = "#1E1E1E" if dark_mode else "#FFFFFF"
    text_color = "#E0E0E0" if dark_mode else "#333333"
    code_bg = "#2D2D2D" if dark_mode else "#F5F5F5"
    accent_color = "#9C27B0" # Roxo prim√°rio
    
    # CSS personalizado baseado no modo
    st.markdown(f"""
    <style>
        .kivy-container {{
            background-color: {bg_color};
            color: {text_color};
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }}
        .kivy-header {{
            color: {accent_color};
            border-bottom: 2px solid {accent_color};
            padding-bottom: 10px;
            margin-bottom: 15px;
        }}
        .kivy-code {{
            background-color: {code_bg};
            padding: 15px;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            overflow-x: auto;
            white-space: pre-wrap;
            border-left: 3px solid {accent_color};
        }}
        .kivy-note {{
            background-color: {"rgba(156, 39, 176, 0.1)" if dark_mode else "rgba(156, 39, 176, 0.05)"};
            padding: 10px;
            border-radius: 5px;
            border-left: 3px solid {accent_color};
            margin: 15px 0;
        }}
        .kivy-button {{
            background-color: {accent_color};
            color: white;
            padding: 8px 16px;
            border-radius: 5px;
            text-decoration: none;
            display: inline-block;
            margin: 10px 0;
            cursor: pointer;
        }}
    </style>
    """, unsafe_allow_html=True)
    
    # Informa√ß√µes sobre o Kivy e o aplicativo m√≥vel
    st.markdown(f"""
    <div class="kivy-container">
        <h3 class="kivy-header">Sobre o Kivy</h3>
        <p>
            Kivy √© um framework Python de c√≥digo aberto para o desenvolvimento r√°pido de aplicativos 
            que utilizam interfaces de usu√°rio inovadoras, como aplicativos multitoque. O framework √© 
            multiplataforma (Windows, macOS, Linux, Android, iOS) e baseado em OpenGL ES 2.
        </p>
        <div class="kivy-note">
            <strong>Vantagens do Kivy:</strong>
            <ul>
                <li>Multiplataforma: execute o mesmo c√≥digo em v√°rias plataformas.</li>
                <li>R√°pido desenvolvimento: crie prot√≥tipos e aplicativos rapidamente.</li>
                <li>Focado em interfaces gr√°ficas: suporte a multitoque e gestos.</li>
                <li>Integra√ß√£o com Python: utiliza todas as bibliotecas e ferramentas Python.</li>
                <li>Linguagem KV: separa a l√≥gica do aplicativo da interface do usu√°rio.</li>
            </ul>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Estrutura do aplicativo Kivy desenvolvido
    st.markdown(f"""
    <div class="kivy-container">
        <h3 class="kivy-header">Aplicativo Sistema Suinocultura</h3>
        <p>
            Foi desenvolvido um aplicativo m√≥vel utilizando Kivy para acesso ao Sistema Suinocultura. 
            O aplicativo permite que usu√°rios realizem opera√ß√µes b√°sicas de gerenciamento diretamente 
            em dispositivos m√≥veis, mesmo com conectividade limitada.
        </p>
        
        <h4>Estrutura do Projeto</h4>
        <div class="kivy-code">
kivy_app/
  ‚îú‚îÄ‚îÄ __init__.py
  ‚îú‚îÄ‚îÄ main.py              # Arquivo principal do aplicativo
  ‚îú‚îÄ‚îÄ suinocultura.kv      # Defini√ß√µes de interface (linguagem KV)
  ‚îú‚îÄ‚îÄ animal_screen.py     # Tela de gerenciamento de animais
  ‚îî‚îÄ‚îÄ assets/              # Imagens e recursos do aplicativo
        </div>
        
        <h4>Funcionalidades Implementadas</h4>
        <ul>
            <li><strong>Autentica√ß√£o:</strong> Login com matr√≠cula para acesso seguro</li>
            <li><strong>Menu Principal:</strong> Acesso aos principais m√≥dulos do sistema</li>
            <li><strong>Gest√£o de Animais:</strong> Cadastro, listagem e edi√ß√£o de animais</li>
        </ul>
        
        <div class="kivy-note">
            <strong>Nota de Desenvolvimento:</strong> O aplicativo Kivy est√° em fase inicial de desenvolvimento. 
            Novas funcionalidades ser√£o adicionadas gradualmente seguindo as prioridades estabelecidas para o sistema.
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Como executar o aplicativo
    st.markdown(f"""
    <div class="kivy-container">
        <h3 class="kivy-header">Executando o Aplicativo</h3>
        
        <h4>Requisitos</h4>
        <ul>
            <li>Python 3.7+</li>
            <li>Kivy 2.1.0+</li>
            <li>PIL (Pillow)</li>
        </ul>
        
        <h4>Comandos para Execu√ß√£o</h4>
        <div class="kivy-code">
# Instala√ß√£o das depend√™ncias
pip install kivy pillow

# Executar o aplicativo
python -m kivy_app.main
        </div>
        
        <h4>Compilando para Android</h4>
        <p>
            Para compilar o aplicativo para Android, √© necess√°rio utilizar o Buildozer, 
            uma ferramenta que automatiza o processo de empacotamento do aplicativo Kivy 
            para Android (e iOS futuramente).
        </p>
        
        <div class="kivy-code">
# Instalar Buildozer
pip install buildozer

# Inicializar configura√ß√£o do Buildozer
buildozer init

# Editar buildozer.spec conforme necess√°rio

# Compilar para Android
buildozer android debug
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Exemplos de c√≥digo
    st.markdown(f"""
    <div class="kivy-container">
        <h3 class="kivy-header">Exemplos de C√≥digo</h3>
        
        <h4>Exemplo da Tela de Login (Python)</h4>
        <div class="kivy-code">
class LoginScreen(Screen):
    def __init__(self, **kwargs):
        super(LoginScreen, self).__init__(**kwargs)
        self.build_interface()
    
    def build_interface(self):
        # Layout principal
        layout = BoxLayout(orientation='vertical', 
                        padding=dp(20), spacing=dp(20))
        
        # Campos de login
        self.matricula_input = TextInput(
            hint_text='Matr√≠cula', 
            multiline=False, 
            size_hint_y=None, height=dp(50)
        )
        
        # Bot√£o de login
        login_button = Button(
            text='Entrar', 
            size_hint_y=None, height=dp(50),
            background_color=get_color_from_hex(ROXO_PRIMARIO)
        )
        login_button.bind(on_press=self.login)
        
        # Adicionar layout √† tela
        self.add_widget(layout)
    
    def login(self, instance):
        # L√≥gica de autentica√ß√£o
        matricula = self.matricula_input.text.strip()
        
        if matricula == "123456":  # Exemplo
            self.manager.current = 'menu'
        else:
            self.status_label.text = "Matr√≠cula n√£o encontrada"
        </div>
        
        <h4>Exemplo da Defini√ß√£o KV para AnimalCard</h4>
        <div class="kivy-code">
<AnimalCard@BoxLayout>:
    orientation: 'vertical'
    size_hint_y: None
    height: dp(150)
    padding: dp(10)
    spacing: dp(5)
    canvas.before:
        Color:
            rgba: get_color_from_hex(BRANCO)
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [dp(5)]
        Color:
            rgba: get_color_from_hex(ROXO_CLARO)
        Line:
            rounded_rectangle: [self.x, self.y, self.width, self.height, dp(5)]
            width: 1.5
    
    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: dp(30)
        
        Label:
            text: 'ID: 12345'
            color: get_color_from_hex(ROXO_PRIMARIO)
            font_size: dp(16)
            bold: True
            
    Label:
        text: 'Porca - Landrace'
        color: get_color_from_hex(CINZA_ESCURO)
        font_size: dp(14)
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Desenvolvimento futuro
    st.markdown(f"""
    <div class="kivy-container">
        <h3 class="kivy-header">Pr√≥ximos Passos de Desenvolvimento</h3>
        
        <h4>Funcionalidades Planejadas</h4>
        <ul>
            <li><strong>M√≥dulo de Reprodu√ß√£o:</strong> Registro de cio, insemina√ß√£o e partos</li>
            <li><strong>Sincroniza√ß√£o Offline:</strong> Trabalho offline com sincroniza√ß√£o posterior</li>
            <li><strong>Escaneamento de QR Code:</strong> Identifica√ß√£o r√°pida de animais</li>
            <li><strong>Relat√≥rios M√≥veis:</strong> Visualiza√ß√£o de relat√≥rios cr√≠ticos em formato m√≥vel</li>
            <li><strong>Notifica√ß√µes Push:</strong> Alertas para eventos importantes</li>
        </ul>
        
        <h4>Otimiza√ß√µes</h4>
        <ul>
            <li>Melhoria de desempenho para dispositivos com recursos limitados</li>
            <li>Otimiza√ß√£o do uso de bateria</li>
            <li>Adapta√ß√£o para diferentes tamanhos de tela</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    
    # Documenta√ß√£o e recursos
    st.markdown(f"""
    <div class="kivy-container">
        <h3 class="kivy-header">Recursos para Desenvolvimento</h3>
        
        <h4>Documenta√ß√£o Oficial</h4>
        <ul>
            <li><a href="https://kivy.org/doc/stable/" target="_blank" style="color: {accent_color};">Documenta√ß√£o do Kivy</a></li>
            <li><a href="https://buildozer.readthedocs.io/" target="_blank" style="color: {accent_color};">Documenta√ß√£o do Buildozer</a></li>
        </ul>
        
        <h4>Tutoriais Recomendados</h4>
        <ul>
            <li><a href="https://kivy.org/doc/stable/tutorials/pong.html" target="_blank" style="color: {accent_color};">Tutorial B√°sico: Criando um jogo Pong</a></li>
            <li><a href="https://github.com/kivy/kivy/tree/master/examples" target="_blank" style="color: {accent_color};">Exemplos Oficiais do Kivy</a></li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    st.markdown('''
    <div style="background-color: #1E1E1E; color: #9C27B0; padding: 1.5rem; border-radius: 10px; margin-bottom: 1rem; border-left: 5px solid #9C27B0; font-family: 'Courier New', monospace;">
        <h2 style="margin:0; color: #9C27B0; text-shadow: 0 0 5px rgba(156, 39, 176, 0.3);">üì± Kivy Mobile</h2>
        <p style="margin-top:0.5rem; color: #BBBBBB;">Ferramentas para desenvolvimento mobile com Kivy</p>
    </div>
    ''', unsafe_allow_html=True)
    
    # Toggle para modo escuro
    if 'kivy_dark_mode' not in st.session_state:
        st.session_state.kivy_dark_mode = False
    
    # Definir estilos com base no modo
    if st.session_state.kivy_dark_mode:
        # Estilos para modo escuro
        bg_color = "#2D2D2D"
        text_color = "#E0E0E0"
        card_bg = "#3D3D3D"
        card_title = "#BB86FC"
        link_color = "#BB86FC"
        border_color = "#444444"
        code_bg = "#1E1E1E"
    else:
        # Estilos para modo claro
        bg_color = "#FFFFFF"
        text_color = "#333333"
        card_bg = "#f5f5f5"
        card_title = "#9C27B0"
        link_color = "#673AB7"
        border_color = "#DDDDDD"
        code_bg = "#F8F8F8"
    
    # CSS para links e elementos no modo escuro/claro
    st.markdown(f"""
    <style>
        .kivy-dark-mode a {{ color: {link_color} !important; }}
        .kivy-card {{ 
            background-color: {card_bg}; 
            padding: 15px; 
            border-radius: 5px; 
            margin-bottom: 20px; 
            color: {text_color};
            border: 1px solid {border_color};
        }}
        .kivy-card h4 {{ color: {card_title}; margin-top: 0; }}
        .kivy-code-block {{ background-color: {code_bg}; padding: 10px; border-radius: 4px; }}
    </style>
    """, unsafe_allow_html=True)
    
    # Toggle para alternar modo escuro
    mode_col1, mode_col2 = st.columns([4, 1])
    with mode_col2:
        if st.toggle("Modo Escuro", value=st.session_state.kivy_dark_mode, key="toggle_dark_mode"):
            st.session_state.kivy_dark_mode = True
        else:
            st.session_state.kivy_dark_mode = False
    
    # Dividir em colunas
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("Informa√ß√µes do Kivy")
        
        # Verificar a instala√ß√£o do Kivy
        try:
            import kivy
            kivy_version = kivy.__version__
            kivy_status = "Instalado"
            kivy_color = "#4CAF50" if not st.session_state.kivy_dark_mode else "#81C784"
        except ImportError:
            kivy_version = "N/A"
            kivy_status = "N√£o Instalado"
            kivy_color = "#F44336" if not st.session_state.kivy_dark_mode else "#E57373"
        
        # Exibir informa√ß√µes sobre o Kivy
        st.markdown(f"""
        <div class="kivy-dark-mode kivy-card">
            <h4>Status do Kivy</h4>
            <p><strong>Vers√£o:</strong> {kivy_version}</p>
            <p><strong>Status:</strong> <span style='color: {kivy_color};'>{kivy_status}</span></p>
        </div>
        """, unsafe_allow_html=True)
        
        # Documenta√ß√£o
        st.markdown(f"""
        <div class="kivy-dark-mode kivy-card">
            <h4>Documenta√ß√£o do Kivy</h4>
            <p>O Kivy √© uma biblioteca Python para desenvolvimento de aplica√ß√µes multi-touch, compat√≠vel com v√°rias plataformas (Windows, MacOS, Linux, Android, iOS).</p>
            <ul>
                <li><a href='https://kivy.org/doc/stable/' target='_blank'>Documenta√ß√£o Oficial</a></li>
                <li><a href='https://kivy.org/doc/stable/gettingstarted/intro.html' target='_blank'>Guia de Introdu√ß√£o</a></li>
                <li><a href='https://kivy.org/doc/stable/examples/index.html' target='_blank'>Exemplos</a></li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.subheader("Desenvolvimento Mobile")
        
        # Explicar como usar o Kivy para desenvolvimento mobile
        st.markdown(f"""
        <div class="kivy-dark-mode kivy-card">
            <h4>Cria√ß√£o de Aplica√ß√µes Mobile</h4>
            <p>Com o Kivy, voc√™ pode criar aplica√ß√µes mobile multiplataforma usando Python:</p>
            <ol>
                <li>Desenvolva sua interface utilizando a linguagem Kv ou Python</li>
                <li>Teste sua aplica√ß√£o localmente</li>
                <li>Compile para Android usando Buildozer ou para iOS usando o Kivy-iOS</li>
            </ol>
        </div>
        """, unsafe_allow_html=True)
        
        # Adicionar exemplos de c√≥digo
        with st.expander("Exemplo B√°sico do Kivy", expanded=True):
            st.code('''
import kivy
from kivy.app import App
from kivy.uix.label import Label

class SuinoculturaApp(App):
    def build(self):
        return Label(text='Sistema Suinocultura Mobile')

if __name__ == '__main__':
    SuinoculturaApp().run()
''', language="python")
        
        with st.expander("Exemplo com Interface Mais Complexa"):
            st.code('''
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label

class SuinoculturaInterface(BoxLayout):
    def __init__(self, **kwargs):
        super(SuinoculturaInterface, self).__init__(**kwargs)
        self.orientation = 'vertical'
        self.padding = 10
        self.spacing = 10
        
        # T√≠tulo
        self.add_widget(Label(
            text='Sistema Suinocultura Mobile',
            size_hint=(1, 0.2),
            font_size=24
        ))
        
        # Bot√µes de navega√ß√£o
        btns = [
            'Cadastro de Animais', 
            'Reprodu√ß√£o', 
            'Crescimento', 
            'Sa√∫de', 
            'Relat√≥rios'
        ]
        
        for btn_text in btns:
            btn = Button(
                text=btn_text,
                size_hint=(1, 0.1),
                background_color=(0.3, 0.6, 0.9, 1)
            )
            btn.bind(on_press=self.button_pressed)
            self.add_widget(btn)
    
    def button_pressed(self, instance):
        print(f'Bot√£o pressionado: {instance.text}')

class SuinoculturaApp(App):
    def build(self):
        return SuinoculturaInterface()

if __name__ == '__main__':
    SuinoculturaApp().run()
''', language="python")
    
    # Se√ß√£o de cria√ß√£o de aplicativo mobile
    st.markdown("---")
    st.subheader("Ferramentas de Desenvolvimento Mobile")
    
    # Configura√ß√£o do Buildozer
    with st.expander("Configura√ß√£o do Buildozer para Android", expanded=False):
        st.markdown(f"""
        <div class="kivy-dark-mode kivy-card">
            <h4>Buildozer</h4>
            <p>O Buildozer √© uma ferramenta que automatiza o processo de compila√ß√£o de aplicativos Kivy para Android e iOS.</p>
            <p>Para configurar, crie um arquivo <code>buildozer.spec</code> na raiz do seu projeto.</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.code('''
[app]
# Nome do seu aplicativo
title = Suinocultura Mobile

# Identificador √∫nico do pacote
package.name = suinoculturaapp
package.domain = com.suinocultura

# Vers√£o do aplicativo
version = 1.0

# Requisitos (depend√™ncias)
requirements = python3,kivy

# Orienta√ß√£o da tela (portrait, landscape)
orientation = portrait

# √çcone do aplicativo
icon.filename = %(source.dir)s/icon.png

# Arquivos a serem inclu√≠dos no pacote
source.include_exts = py,png,jpg,kv,atlas

[buildozer]
# Android settings
android.permissions = INTERNET
''', language="ini")
    
    # Interface para experimenta√ß√£o do Kivy
    st.markdown("---")
    st.subheader("√Årea de Experimenta√ß√£o")
    
    # Editor de c√≥digo simples para experimenta√ß√£o - estilizado com base no modo
    code_background = code_bg if st.session_state.kivy_dark_mode else "#f5f5f5"
    text_color_code = "#E0E0E0" if st.session_state.kivy_dark_mode else "#333333"
    
    # Aplicar estilo CSS em tempo real ao container do editor de c√≥digo
    if st.session_state.kivy_dark_mode:
        st.markdown("""
        <style>
            .stTextArea textarea {
                background-color: #1E1E1E !important;
                color: #E0E0E0 !important;
                border: 1px solid #444444 !important;
            }
        </style>
        """, unsafe_allow_html=True)
    
    # Editor de c√≥digo simples para experimenta√ß√£o
    kivy_code = st.text_area(
        "Experimente o c√≥digo Kivy aqui (n√£o executa no navegador, apenas para refer√™ncia)",
        height=200,
        value='''
from kivy.app import App
from kivy.uix.button import Button

class TestApp(App):
    def build(self):
        return Button(text='Ol√° de Kivy',
                      size_hint=(0.5, 0.5),
                      pos_hint={'center_x': 0.5, 'center_y': 0.5})

if __name__ == '__main__':
    TestApp().run()
''')
    
    # Dicas e recursos adicionais
    st.markdown("---")
    st.subheader("Dicas e Recursos")
    
    st.markdown(f"""
    <div class="kivy-dark-mode kivy-card">
        <h4>Como integrar o Sistema Suinocultura com Kivy</h4>
        <p>Para criar uma vers√£o mobile do Sistema Suinocultura:</p>
        <ol>
            <li>Crie uma interface Kivy que se comunique com a API do sistema</li>
            <li>Defina as telas principais para as funcionalidades essenciais</li>
            <li>Implemente a comunica√ß√£o HTTP para acessar os dados remotamente</li>
            <li>Use o Buildozer para compilar a aplica√ß√£o para Android</li>
        </ol>
    </div>
    
    <div class="kivy-dark-mode kivy-card">
        <h4>Recursos para Aprendizado</h4>
        <ul>
            <li><a href='https://kivy.org/doc/stable/tutorials/pong.html' target='_blank'>Tutorial: Criando um jogo de Pong</a></li>
            <li><a href='https://github.com/kivy/kivy/tree/master/examples' target='_blank'>Exemplos oficiais do Kivy</a></li>
            <li><a href='https://kivy.org/doc/stable/api-kivy.html' target='_blank'>API do Kivy</a></li>
            <li><a href='https://buildozer.readthedocs.io/en/latest/' target='_blank'>Documenta√ß√£o do Buildozer</a></li>
        </ul>
    </div>
    
    <div class="kivy-dark-mode kivy-card" style="margin-top: 20px; text-align: center;">
        <p style="font-style: italic;">O modo escuro facilita o desenvolvimento prolongado, reduzindo o cansa√ßo visual.</p>
    </div>
    """, unsafe_allow_html=True)

# Rodap√©
st.markdown("---")
st.caption(f"Sistema de Gest√£o Suinocultura | √Årea do Desenvolvedor ¬© {datetime.datetime.now().year} - Todos os direitos reservados")